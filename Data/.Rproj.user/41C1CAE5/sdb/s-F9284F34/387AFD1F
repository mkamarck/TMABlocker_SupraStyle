{
    "contents" : "#DB script for looking at TMA dose response in Jars\n#Import Libraries\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(drm)\n\n\n\n#Import Data####\nsubj <- dir(path = \"Raw Data/TMA_DR_jars\", pattern=\"\\\\.txt$\", full.names=TRUE)# creating a list of all file names\nnames(subj)  <- basename(subj)\ndf.jars  <- ldply(subj, read.delim, stringsAsFactors=FALSE)\n\ndf.jars <- subset(df, select = c(\"Subject\", \"Trial\", \"TrainList\", \"Running.Block.\", \"IntensityRating\",\"Jar\",\"Concentration\")) \n### df w/ columns of interest. this is where the other subjects are lost\ndf.jars$IntensityRating.inv <- 580-as.integer(df.jars$IntensityRating)\n\n\n#Trial Data\ndf.trialJars <- subset(df.jars, Running.Block. == \"Test\", select = c(\"Subject\", \"Trial\", \"valve\", \"valve2\", \"Running.Block.\", \"IntensityRating.inv\",\"Jar\",\"Concentration\"))\n#write.csv(df.trial, \"TMA_supra_9.csv\") #give this to Dardalie to import\n\n\n#Normalize####\nscale01 <- function(value, minValue, maxValue) {\n  (value - minValue)/(maxValue - minValue)\n}\n#returns dataframe with the minimum and maximum values for each subject\nsubjMinMax <- ddply(df.trialJars, .variables = c(\"Subject\"), .fun = summarize, minValue = min(IntensityRating.inv), maxValue = max(IntensityRating.inv))\n#merges the max and min values with the full dataframe\ndf.scaleJars <- merge(df.trialJars, subjMinMax)\n#calculates the normalized values using the scale function as written\ndf.scaleJars$normValue <- scale01(df.scaleJars$IntensityRating.inv, df.scaleJars$minValue, df.scaleJars$maxValue)\n\n#Plot all Subjects####\n\nggplot(data = subset(df.trialJars, Subject == 6), aes(x = Concentration, y = IntensityRating.inv, color = factor(Subject))) +\n  geom_point() +\n  facet_wrap(~Subject)\n\n#for loop - plot each subject####\nfor (i in unique(df.scaleJars$Subject)) {\n  plot = ggplot(data = subset(df.scaleJars, Subject == i), aes(x = Concentration, y = IntensityRating.inv, color = factor(Subject))) + \n    geom_point() +  # make points transparent (e.g. geom_point(alpha = 0.05)) or very small (e.g. geom_point(shape = \".\")\n    facet_wrap(~Type) +\n    ggtitle(paste(\"Subject Number\", i))   # ggtitle -> title of chart\n  print(plot)\n}\n\n\n### For loop doesn't work\n\n\n\n\n\n#Apply Sigmoid Function\n\ndf.jars.model<- subset(df.trialJars, Subject == 6 )\njars.data.model <- subset(df.jars.model, select = c(\"Concentration\", \"IntensityRating.inv\")) \n# selects two columns of df.scale and makes a new df, data.model\n\n# TMA sensitivity graph for subject 6\nggplot(df.jars.model, aes(x = Concentration, y = IntensityRating.inv)) +\n  geom_point() +\n  geom_smooth()\n\n#run HIll model#####\n#subset - imputs log10 of concentration column in small.scale into new conc.log column\ndf.jars.model$concentration.log <- log10(df.jars.model$Concentration)\n\n\nmodel.TMAjars <- drm(formula = IntensityRating.inv~concentration.log, data = df.jars.model, fct = LL.4(fixed = c(1, NA, NA, NA), names = (c(\"Slope\", \"Top\", \"Bottom\", \"ED\"))))\nsummary(model.TMAjars)    \nTMAjars.graph = function(x){\n  summary(model.TMAjars)$coefficients[2,1] + (summary(model.TMAjars)$coefficients[1,1]-summary(model.TMAjars)$coefficients[2,1])/(1+10^((log10(summary(model.TMAjars)$coefficients[3,1]) - x)*1))\n}\n\n#drm is dose response model function , summary give sum. stats , \n#LL.4 sets the 4 parameters of sigmoid curve ( slope at 1, looking for other)\n\nggplot(df.jars.model, aes(x = concentration.log, y = IntensityRating.inv)) +\n  geom_point() +\n  stat_function(fun = model.TMAjars)\n### Finally, this last bit doesn't run. Get this: Error in layer(data = data, mapping = mapping, stat = StatFunction, \n#geom = geom,  : object 'model.TMAjars' not found",
    "created" : 1500579812458.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3359748881",
    "id" : "387AFD1F",
    "lastKnownWriteTime" : 1500580149,
    "path" : "/Volumes/mainland/Projects/TMA blocker/SupraStyle/Data/TMA_DR_jars_byDB.R",
    "project_path" : "TMA_DR_jars_byDB.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}