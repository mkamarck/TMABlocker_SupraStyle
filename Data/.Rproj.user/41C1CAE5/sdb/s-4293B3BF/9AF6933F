{
    "contents" : "#Experiment 1 Graphs with curves\n\n#Import Libraries####\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(drc)\nlibrary(sandwich)\nlibrary(lmtest)\nlibrary(multcomp)\nlibrary(readr)\nlibrary(tibble)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(rlist)\nlibrary(stringr)\nlibrary(pipeR)\nlibrary(rvest)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(rsvg)\nlibrary(naturalsort)\n\n#Import Data\nsubj <- dir(path = \"/Volumes/mainland/Projects/TMA\\ blocker/SupraStyle/Data/Raw\\ Data/Test1_olfactometer\", pattern=\"\\\\.txt$\", full.names=TRUE)# on mac - creating a list of all file names\nnames(subj)  <- basename(subj)\ndf  <- ldply(subj, read.delim, stringsAsFactors=FALSE) \n\n#subset variables\ndf <- subset(df, select = c(\"Subject\", \"Trial\", \"valve\", \"valve2\", \"TrainList\", \"Running.Block.\", \"IntensityRating\"))\ndf$IntensityRating.inv <- 580-as.integer(df$IntensityRating)\n\n#Trial Data\ndf.trial <- subset(df, Running.Block. == \"Test\", select = c(\"Subject\", \"Trial\", \"valve\", \"valve2\", \"Running.Block.\", \"IntensityRating.inv\"))\n\n#import the file that has the trial types\nvalve.list <- read.csv(\"/Volumes/mainland/Projects/TMA blocker/SupraStyle/Data/Analysis/TMA_supra_highTMA_merge.csv\") #for a mac\n\n#merge with trial list\ndf.trial_merge <- merge(df.trial, valve.list)\n\n#visualize data\nggplot(subset(df.trial_merge), aes(x = Concentration, y = IntensityRating.inv, color = Type)) +\n  geom_point() +\n  facet_wrap(~Type)\n\n###############################Make all clean jars have same label###################\ndf.trial_merge$Type_new <- as.factor(df.trial_merge$Type)\nfor (i in 1:length(df.trial_merge$Type)){\n  if(df.trial_merge$Type[i] %in% c(\"Blank 1\", \"Blank 2\", \"blank combo\", \"Blank combo\")){\n    df.trial_merge$Type_new[i] <- \"Blank 1\"\n  }  \n#   else{\n#     df.trial_merge$Type_new[i] <- df.trial_merge$Type[i]\n#   }\n}\n\n#scale data\ndf.scale <- ddply(.data = df.trial_merge, .variables = c(\"Subject\"), .fun = mutate, normIntensity = scale(IntensityRating.inv))\n\n\n################################################################\n\n##################write the hill function - outputs the predicted values and stuff you need to make the graph#####\n\n################################################################\nHillEquationFit <- function(temp_data, form, normalized = FALSE){\n  temp_conc <- temp_data %>>% (.$Concentration) %>>% sort() %>>% unique() #\n  min_conc <- min(temp_conc[temp_conc != 0])\n  max_conc <- max(temp_conc)\n  if(!normalized){\n    top_upper = 500\n    low_bottom = 0\n  }\n  else{\n    top_upper = 10\n    low_bottom = -5\n  }\n  \n  temp_fit <- drm(form, \n                  data = temp_data, \n                  lowerl = c(-4*log(10), low_bottom, low_bottom, min_conc), #had to change the limits for the normalization process.\n                  upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero? \n                  fct = LL.4())\n  #using LL.4 instead of L.4 becuase the function actually seems to fit here! - not sure the difference, maybe in inputting logarhythms or something\n  print(summary(temp_fit))\n  #make prediction dataframe\n  new_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))\n  # predictions and confidence intervals\n  pm <- predict(temp_fit, newdata = new_data_for_plot, interval = \"confidence\") %>>% data.frame()\n  ##new_data_for_plot <- bind_cols(new_data_for_plot, pm) \n  new_data_for_plot <- cbind(new_data_for_plot, pm)\n  #find mean and SEM\n  return(new_data_for_plot)\n}\n\n\n################################################################\n\n#Fit curves to all graphs RAW DATA\n\n################################################################\n#for the first pass, this is going to be done without clean jars because I'm not sure how to handle them yet. \n\n#define these things for the function\npdf(\"Analysis/Figures/Analysis_experiment1_withCurves.pdf\")\nfor (i in unique(df.trial_merge$Type_new)){\n  if(i != \"Blank 1\"){\n    temp_data <- subset(df.trial_merge, Concentration !=0 & !Subject %in% c(14, 16, 18, 36) & Type == i)\n    form <- formula(\"IntensityRating.inv ~ Concentration\")\n    print(paste(\"Summary of Type = \", i))\n    new_data_for_plot <- HillEquationFit(temp_data, form, normalized = FALSE)\n    \n    #test function plot\n    print(ggplot(temp_data, aes(x = Concentration, y = IntensityRating.inv)) +\n      geom_point() +\n      geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +\n      geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +\n      ggtitle(paste(\"Test Graph for Type = \", i))\n    )\n    #get mean and SEM\n    summary_test <- ddply(temp_data, .variables = c(\"Concentration\"), .fun = summarize, Intensity = mean(IntensityRating.inv), se = sd(IntensityRating.inv)/sqrt(length(IntensityRating.inv)))\n    \n    #plot\n    #png(\"Analysis/Figures/Experiment3_rawData_curve_withScale.png\")\n    print(ggplot(df.scale, aes(x = Concentration)) +\n      #geom_point() +\n      geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +\n      geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +\n      geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) + # error bars of samples\n      #scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \"Strongest imaginable \\nsensation of any kind\")) + \n      scale_y_continuous(limits = c(0, 500), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5, 100*5), labels = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \"Strongest imaginable \\nsensation of any kind\")) +#yusuke's line *5 \n      ggtitle(paste(\"Type = \", i))  \n        ) \n       #dev.off()\n  #looks weird with log scale because the concentrations for linalool aren't real in this dataframe (just labled 1-6 to make life easier. How much does this affect the graph???)\n  }\n  else{\n    print(\"Blank 1\")\n  }\n}\n#nonenol + Linalool looks really weird. \ndev.off()\n\n# #This code is leftover for individual graphs\n# ggplot(df.scale, aes(x = Concentration)) +\n#   #geom_point() +\n#   geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +\n#   geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +\n#   geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) #+ # error bars of samples\n# #   #scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \"Strongest imaginable \\nsensation of any kind\")) + \n# #   scale_y_continuous(limits = c(0, 500), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5, 100*5), labels = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \"Strongest imaginable \\nsensation of any kind\")) + #yusuke's line *5 +\n# #   scale_x_log10()\n\n################################################################\n\n#Fit curves to all graphs NORMALIZED DATA\n\n################################################################\npdf(\"Analysis/Figures/Analysis_experiment1_withCurves_normalized_linaloolandTMA.pdf\")\ndf.scale_sub <- subset(df.scale, Type %in% c(\"Linalool\", \"TMA\"))\nfor (i in unique(df.scale_sub$Type_new)){\n  if(i != \"Blank 1\"){\n    temp_data <- subset(df.scale_sub, Concentration !=0 & !Subject %in% c(14, 16, 18, 36) & Type == i)\n    form <- formula(\"normIntensity ~ Concentration\")\n    print(paste(\"Summary of Type = \", i))\n    new_data_for_plot <- HillEquationFit(temp_data, form, normalized = TRUE)\n    \n    #test function plot\n#     print(ggplot(temp_data, aes(x = Concentration, y = normIntensity)) +\n#             geom_point() +\n#             geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +\n#             geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +\n#             ggtitle(paste(\"Test Graph for Type = \", i))\n#     )\n    #get mean and SEM\n    summary_test <- ddply(temp_data, .variables = c(\"Concentration\"), .fun = summarize, Intensity = mean(normIntensity), se = sd(normIntensity)/sqrt(length(normIntensity)))\n    \n    #plot\n    #png(\"Analysis/Figures/Experiment3_rawData_curve_withScale.png\")\n    print(ggplot(summary_test, aes(x = Concentration, y = Intensity)) +\n            geom_point() +\n            geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +\n            geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +\n            geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) + # error bars of samples\n            #scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \"Strongest imaginable \\nsensation of any kind\")) + \n            #scale_y_continuous(limits = c(0, 500), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5, 100*5), labels = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \"Strongest imaginable \\nsensation of any kind\")) +#yusuke's line *5 \n            ggtitle(paste(\"Type = \", i))  +\n            theme_bw() +\n            ylim(-1.5, 2.5)\n    ) \n    #dev.off()\n    #looks weird with log scale because the concentrations for linalool aren't real in this dataframe (just labled 1-6 to make life easier. How much does this affect the graph???)\n  }\n  else{\n    print(\"Blank 1\")\n  }\n}\ndev.off()\n\n################################################################\n\n#Fit curves to RAW TMA data\n\n################################################################\n\ntemp_data <- subset(df.trial_merge, Concentration !=0 & !Subject %in% c(14, 16, 18, 36) & Type == TMA)\nform <- formula(\"IntensityRating.inv ~ Concentration\")\nprint(paste(\"Summary of Type = \", i))\nnew_data_for_plot <- HillEquationFit(temp_data, form, normalized = FALSE)\n\n#test function plot\nprint(ggplot(temp_data, aes(x = Concentration, y = IntensityRating.inv)) +\n        geom_point() +\n        geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +\n        geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +\n        ggtitle(paste(\"Test Graph for Type TMA\"))\n)\n#get mean and SEM\nsummary_test <- ddply(temp_data, .variables = c(\"Concentration\"), .fun = summarize, Intensity = mean(IntensityRating.inv), se = sd(IntensityRating.inv)/sqrt(length(IntensityRating.inv)))\n\n#plot\n#png(\"Analysis/Figures/Experiment3_rawData_curve_withScale.png\")\nprint(ggplot(df.scale, aes(x = Concentration)) +\n        #geom_point() +\n        geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +\n        geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +\n        geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) + # error bars of samples\n        #scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \"Strongest imaginable \\nsensation of any kind\")) + \n        scale_y_continuous(limits = c(0, 500), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5, 100*5), labels = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \"Strongest imaginable \\nsensation of any kind\")) +#yusuke's line *5 \n        ggtitle(paste(\"Type = \", i))  \n) \n#dev.off()\n#looks weird with log scale because the concentrations for linalool aren't real in this dataframe (just labled 1-6 to make life easier. How much does this affect the graph???)\n\n",
    "created" : 1502207671600.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "158|0|198|9|\n",
    "hash" : "1535518225",
    "id" : "9AF6933F",
    "lastKnownWriteTime" : 1502221881,
    "path" : "/Volumes/mainland/Projects/TMA blocker/SupraStyle/Data/Analysis/Experiment1_graphs_withCurves.R",
    "project_path" : "Analysis/Experiment1_graphs_withCurves.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "type" : "r_source"
}