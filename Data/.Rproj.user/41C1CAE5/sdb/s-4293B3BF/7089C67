{
    "contents" : "getTrainResults <- function(fileName, path, subject, exp, block) {\n  Questions    <- c(\"Loudness of a whisper\", \"Loudness of a conversation\", \"Loudest sound you have ever heard\", \n                    \"Brightness of a dimly lit room\", \"Brightness of a well-lit room\", \"Brightest light you have ever seen\", \n                    \"Warmth of a summer breeze on your face\", \"Heat from dipping your hand in scalding hot water\", \n                    \"Strength of a firm handshake\", \"Pain of bitting your tongue\", \n                    \"Sweetness of cotton candy\", \"Bitter taste of black coffee\", \"Sourness of a lemon\", \n                    \"Coolness from a peppermint candy\", \"Burn from cinnamon gum\")\n  Sensations   <- c(\"Auditory\", \"Auditory\", \"Auditory\", \n                    \"Visual\", \"Visual\", \"Visual\", \n                    \"Thermal\", \"Thermal\", \n                    \"Tactile\", \"Tactile\", \n                    \"Taste\", \"Taste\", \"Taste\", \n                    \"Chemesthetic\", \"Chemesthetic\")\n  QuestionList <- data_frame(Question = Questions, Sensation = Sensations)\n  raw_data <- read_html(paste0(path, \"data/Raw/\", exp, \"/\", fileName)) %>>% html_text()\n  SessionDate <- raw_data %>>% \n    str_split(\" Header End \") %>>% (.[[1]][1]) %>>% \n    str_extract_all(\"SessionDate: \\\\d+-\\\\d+-\\\\d+\") %>>% \n    str_extract_all(\"\\\\d+-\\\\d+-\\\\d+\") %>>% \n    unlist()\n  SessionTime <- raw_data %>>% \n    str_split(\" Header End \") %>>% (.[[1]][1]) %>>% \n    str_extract_all(\"SessionTime: \\\\d+:\\\\d+:\\\\d+\") %>>% \n    str_extract_all(\"\\\\d+:\\\\d+:\\\\d+\") %>>% \n    unlist()\n  SessionInfo <- paste(SessionDate, SessionTime)\n  ScaleTraining_Session <- raw_data %>>% \n    str_split(\" LogFrame Start \") %>>% unlist() %>>% \n    (.[str_detect(., \"ScaleTraining: \")])\n  ScaleTraining_TrialNo <- ScaleTraining_Session %>>% \n    str_extract_all(\"ScaleTraining: \\\\d+\") %>>% \n    str_extract_all(\"\\\\d+\") %>>% \n    unlist() %>>% as.numeric()\n  ScaleTraining_IntensityRating <- ScaleTraining_Session %>>% \n    str_extract_all(\"IntensityRating: \\\\d+\") %>>% \n    str_extract_all(\"\\\\d+\") %>>% \n    unlist() %>>% as.numeric() %>>% ((580 - .) / 580 * 100)\n  ScaleTraining_Question <- ScaleTraining_Session %>>% \n    str_split(\"Question: \") %>>% unlist() %>>% \n    str_split(\"\\r\\n\") %>>% unlist() %>>% \n    str_replace_all(\"please\", \"Please\") %>>% \n    (.[str_detect(., \"Please rate\")]) %>>% \n    str_replace_all(\"\\\\\\\\n \", \"\") %>>% \n    str_replace(\"Please rate the \", \"\") %>>% \n    (paste0(toupper(str_sub(., 1, 1)), str_sub(., 2)))\n  out <- data_frame(TrialNo = ScaleTraining_TrialNo, \n                    IntensityRating = ScaleTraining_IntensityRating, \n                    Question = ScaleTraining_Question) \n  out <- out %>>% \n    left_join(QuestionList, by = \"Question\") %>>% \n    mutate(Subject = subject, Block = block, Date = SessionInfo, Question = factor(Question, levels = Questions)) %>>% \n    dplyr::select(Block, Subject, Date, Question, IntensityRating, TrialNo, Sensation) %>>% \n    arrange(Block, Subject, Question)\n  return(out)\n}\n\n# Block5 day1, block7 day1, block18 day3-5, block21 subject 12, makeup block for block 24\nirregular1 = c(\"-18-5.txt\", \"-4-5.txt\", \"-52-5.txt\", \n               \"-12-7.txt\", \"-4-7.txt\", \"-52-7.txt\", \"-24-7.txt\",\n               \"-19-18.txt\", \"-13-18.txt\", \"-56-18.txt\", \"-26-18.txt\", \"-17-18.txt\", \"-46-18.txt\", \"-7-18.txt\", \"-37-18.txt\", \"-30-18.txt\", \n               \"-12-21.txt\", \n               \"-4-26.txt\", \"-12-26.txt\", \"-37-26.txt\", \"-52-26.txt\", \"-63-26.txt\", \"-73-26.txt\", \n               \"-95-24.txt\", \"-912-24.txt\", \"-913-24.txt\", \"-930-24.txt\", \"-937-24.txt\", \"-952-24.txt\", \"-953-24.txt\", \"-962-24.txt\", \"-973-24.txt\", \"-975-24.txt\", \"-977-24.txt\", \"-981-24.txt\", \"-983-24.txt\", \"-985-24.txt\", \"-988-24.txt\", \"-990-24.txt\")\n# Block5 day2 morning or block7 day2 and day3 morning\nirregular2 = c(\"-21-5.txt\", \"-3-5.txt\", \"-5-5.txt\", \n               \"-21-7.txt\", \"-35-7.txt\", \"-5-7.txt\", \"-13-7.txt\", \"-20-7.txt\", \"-19-7.txt\")\n\ngetExpResults <- function(fileName, path, subject, exp, block, ctrls, concSolvent, conAir, irre1 = irregular1, irre2 = irregular2) {\n  \n  # Odor information\n  is.irre1 = str_detect(fileName, irre1) %>>% (max(.) == 1)\n  is.irre2 = str_detect(fileName, irre2) %>>% (max(.) == 1)\n  if (is.irre1) {\n    odor_info <- read_csv(paste0(path, \"data/OdorInfo/\", exp, \"-1.csv\"), col_types = \"ddccddddddddcdcd\")\n  } else if (is.irre2) {\n    odor_info <- read_csv(paste0(path, \"data/OdorInfo/\", exp, \"-2.csv\"), col_types = \"ddccddddddddcdcd\")\n  } else {\n    odor_info <- read_csv(paste0(path, \"data/OdorInfo/\", exp, \".csv\"), col_types = \"ddccddddddddcdcd\")\n  }\n  odor_info <- odor_info %>>% \n    gather(key = Level, value = Concentration, A:G) %>>% \n    arrange(Seq, Level) %>>% \n    mutate(Valve = c(rev(2:8), rev(10:16), rev(18:24), rev(26:32)))\n  # Add molar concentrations\n  odor_info <- odor_info %>>% mutate(MolarConc = 1000 * Concentration * ifelse(Phase == \"S\", 1, Density) / MW)\n  # Control information\n  ctrl_info <- data_frame(Odor = ctrls, \n                          Solvent = ctrls[c(1, 2, 3, 3)], \n                          Concentration = c(conAir, conAir, concSolvent, 0.01), \n                          MolarConc = c(conAir, conAir, concSolvent, 5.638367e-02), \n                          Valve = c(1, 9, 17, 25))\n  test_info <- odor_info %>>% \n    dplyr::select(Seq, Odor, InstockKey, oID, Solvent, Concentration, MolarConc, Valve) %>>% \n    bind_rows(ctrl_info) %>>% \n    arrange(Valve)\n  \n  # Session info\n  raw_data_test <- read_html(paste0(path, \"data/Raw/\", exp, \"/\", fileName)) %>>% html_text()\n  SessionDate <- raw_data_test %>>% str_split(\" Header End \") %>>% (.[[1]][1]) %>>% str_extract_all(\"SessionDate: \\\\d+-\\\\d+-\\\\d+\") %>>% str_extract_all(\"\\\\d+-\\\\d+-\\\\d+\") %>>% unlist()\n  SessionTime <- raw_data_test %>>% str_split(\" Header End \") %>>% (.[[1]][1]) %>>% str_extract_all(\"SessionTime: \\\\d+:\\\\d+:\\\\d+\") %>>% str_extract_all(\"\\\\d+:\\\\d+:\\\\d+\") %>>% unlist()\n  SessionInfo <- paste(SessionDate, SessionTime)\n  # Ratings\n  TestSession <- raw_data_test %>>% str_split(\" LogFrame Start \") %>>% unlist %>>% (.[str_detect(., \"TestList: \")])\n  odor_seq <- TestSession %>>% str_extract_all(\"valve: \\\\d+\") %>>% str_extract_all(\"\\\\d+\") %>>% unlist() %>>% as.numeric()\n  rate_seq <- TestSession %>>% str_extract_all(\"IntensityRating: \\\\d+\") %>>% str_extract_all(\"\\\\d+\") %>>% unlist() %>>% as.numeric() %>>% ((580 - .) / 580 * 100)\n  data <- data_frame(Valve = odor_seq, IntensityRating = rate_seq)\n  if (nrow(data) > 96) { data <- head(data, 96) }\n  data <- data %>>% filter(IntensityRating >= 0) # When a subject accidentally failed to rate the intensity at a trial replace the value with 1000 and then remove it from here\n  out <- data %>>% \n    mutate(TrialNo = 1:nrow(.), Subject = subject, Block = block, Date = SessionInfo) %>>% \n    left_join(test_info, by = \"Valve\") %>>% dplyr::select(Subject, Block, Date, Seq, TrialNo, Valve, Odor, InstockKey, oID, Solvent, Concentration, MolarConc, IntensityRating) %>>% \n    arrange(Valve, TrialNo) %>>% mutate(Seq = factor(Seq))# %>>% mutate(Concentration = log10(Concentration), MolarConc = log10(MolarConc))\n  return(out)\n}\n\nmape <- function(model) {\n  out <- model$origData %>>% \n    mutate(Prediction = model$predres[, 1]) %>>% \n    group_by(Concentration) %>>% summarise_each(funs(mean), IntensityRating, Prediction) %>>% ungroup() %>>% \n    mutate(Residual = IntensityRating - Prediction) %>>% \n    mutate(AbsPercentError = abs(Residual/Prediction) * 100) %>>% \n    summarise(MAPE = mean(AbsPercentError)) %>>% as.numeric()\n  return(out)\n}\n\nse <- function(x) {\n  sd(x, na.rm = T) / sqrt(sum(!is.na(x)))\n}\n\nfit_plot_dr <- function(odorkey, data, ctrls, conc_Solvent, conc_Air, concType = \"molar\", facet_by = NULL, svgs = SVGs) {\n  \n  # [Part 0]\n  ## Set up\n  ############################################################################################################\n  if (concType == \"molar\") { data$Concentration <- data$MolarConc }\n  data <- data %>>% mutate(Concentration = log10(Concentration))\n  conc_Solvent = log10(conc_Solvent)\n  conc_Air = log10(conc_Air)\n  data[data$Odor %in% c(\"Paraffin oil\"), \"Concentration\"] <- conc_Solvent\n  data[data$Odor %in% c(\"Clean air\"), \"Concentration\"] <- conc_Air\n  subject   <- unique(data$Subject)\n  n_subject <- length(subject)\n  odor <- data %>>% filter(InstockKey == odorkey) %>>% (.$Odor) %>>% unique()\n  seq  <- data %>>% filter(InstockKey == odorkey) %>>% (.$Seq) %>>% unique()\n  ctrl <- data %>>% filter(Odor %in% ctrls)\n  test <- data %>>% filter(!(Odor %in% ctrls))\n  \n  if (n_subject == 1) {\n    id <- paste0(odor, \" (Hill modeling); Subject #\", subject)\n    testRetest_P <- unique(data$testRetest.P)\n    testRetest_S <- unique(data$testRetest.S)\n  } else {\n    id <- paste0(odor, \" (Hill modeling); \", n_subject, \" subjects\")\n  }\n  cat(\"\\nFitting...\", id, \"\\n\")\n  ############################################################################################################\n  \n  # [PART 1]\n  ## Fit data to the model of Hill\n  ############################################################################################################\n  temp_data <- data %>>% filter(Odor %in% c(\"Clean air\", \"Paraffin oil\", odor))\n  temp_conc <- temp_data %>>% (.$Concentration) %>>% sort() %>>% unique()\n  min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)])\n  max_conc <- max(temp_conc)\n  form <- formula(\"IntensityRating ~ Concentration\")\n  # Fit the data by Hill's model with constraints\n  temp_fit <- drm(form, \n                  data = temp_data, \n                  lowerl = c(-4*log(10), 0, 0, min_conc), \n                  upperl = c(0, 100, 100, NA), \n                  fct = L.4())\n  ############################################################################################################\n  \n  ## Fitted parameters\n  ############################################################################################################\n  # Robust standard errors against misspecification of the distributional assumptions (sandwich estimator) and\n  # Adjusted p-values controlling the family-wise error rate (simultaneous inference)\n  tryCatch({ summary_fit <- summary(glht(temp_fit, vcov = sandwich)) }, error = function(e) message(e) )\n  if (exists(\"summary_fit\")) {\n    ## Extract the fitted parameters and effective doses\n    # Coefficients of fitted model\n    coefs <- summary_fit$test$coefficients\n    # The L.4 function, f(x) = c + (d-c)/(1+exp(b*(x-e))), regards x and e as log(Concentration) and log(EC50), respectively.\n    # However, the values we put in x and e are log10(Concentration) and log10(EC50) because we want to know EC50 and its standard error in log10 scale rather than in log scale.\n    # This inconsistency make the function return the coefficient of slope, b, that are multiplied by log(10).\n    # So, we needs to devide b by log(10) to obtain the true value of the slope of the curve\n    slope <- coefs[\"b:(Intercept)\"] %>>% as.numeric() %>>% (./log(10))\n    base  <- coefs[\"c:(Intercept)\"] %>>% as.numeric()\n    peak  <- coefs[\"d:(Intercept)\"] %>>% as.numeric()\n    ec50  <- coefs[\"e:(Intercept)\"] %>>% as.numeric()\n    # p-values of fitted model (if the p-value is under 0.05, the coefficients is significantly different from 0)\n    pvals <- summary_fit$test$pvalues\n    pSlope <- pvals[1] # should be significant\n    pBase  <- pvals[2] # should NOT be significant\n    pPeak  <- pvals[3] # should be significant\n    sSlope <- pSlope %>>% (ifelse(. < 0.001, \"***\", ifelse(. < 0.01, \"**\", ifelse(. < 0.05, \"*\", \" n.s.\"))))\n    sBase  <- pBase  %>>% (ifelse(. < 0.001, \"***\", ifelse(. < 0.01, \"**\", ifelse(. < 0.05, \"*\", \" n.s.\"))))\n    sPeak  <- pPeak  %>>% (ifelse(. < 0.001, \"***\", ifelse(. < 0.01, \"**\", ifelse(. < 0.05, \"*\", \" n.s.\"))))\n    # Standard error of parameters\n    sigmas <- summary_fit$test$sigma\n    seSlope <- sigmas[\"b:(Intercept)\"] %>>% as.numeric() %>>% (./log(10))\n    seBase  <- sigmas[\"c:(Intercept)\"] %>>% as.numeric()\n    sePeak  <- sigmas[\"d:(Intercept)\"] %>>% as.numeric()\n    seEC50  <- sigmas[\"e:(Intercept)\"] %>>% as.numeric()\n  } else {\n    summary_fit <- coeftest(temp_fit, vcov = sandwich)\n    coefs <- summary_fit[, \"Estimate\"]\n    slope <- coefs[\"b:(Intercept)\"] %>>% as.numeric() %>>% (./log(10))\n    base  <- coefs[\"c:(Intercept)\"] %>>% as.numeric()\n    peak  <- coefs[\"d:(Intercept)\"] %>>% as.numeric()\n    ec50  <- coefs[\"e:(Intercept)\"] %>>% as.numeric()\n    pvals <- summary_fit[, \"Pr(>|t|)\"]\n    pSlope <- pvals[\"b:(Intercept)\"] # should be significant\n    pBase  <- pvals[\"c:(Intercept)\"] # should NOT be significant\n    pPeak  <- pvals[\"d:(Intercept)\"] # should be significant\n    sSlope <- pSlope %>>% (ifelse(. < 0.001, \"***\", ifelse(. < 0.01, \"**\", ifelse(. < 0.05, \"*\", \" n.s.\"))))\n    sBase  <- pBase  %>>% (ifelse(. < 0.001, \"***\", ifelse(. < 0.01, \"**\", ifelse(. < 0.05, \"*\", \" n.s.\"))))\n    sPeak  <- pPeak  %>>% (ifelse(. < 0.001, \"***\", ifelse(. < 0.01, \"**\", ifelse(. < 0.05, \"*\", \" n.s.\"))))\n    # Standard error of parameters\n    sigmas <- summary_fit[, \"Std. Error\"]\n    seSlope <- sigmas[\"b:(Intercept)\"] %>>% as.numeric() %>>% (./log(10))\n    seBase  <- sigmas[\"c:(Intercept)\"] %>>% as.numeric()\n    sePeak  <- sigmas[\"d:(Intercept)\"] %>>% as.numeric()\n    seEC50  <- sigmas[\"e:(Intercept)\"] %>>% as.numeric()\n  }\n  ############################################################################################################\n  \n  ## Check if there is dose-response relationship.\n  ############################################################################################################\n  ## Comparing the dese-response model to a model where the response is on average constant and hence not changing with dose.\n  doseReponse <- as.numeric(noEffect(temp_fit)[\"p-value\"]) < 0.05\n  ## Top is higher than bottom?\n  new_data <- expand.grid(Concentration = seq(conc_Air, max_conc, length.out = 1000)) # range of concentrations\n  pred <- predict(temp_fit, newdata = new_data, interval = \"confidence\") %>>% data.frame()\n  TovB <- (max(pred$Lower, na.rm = TRUE) > min(pred$Upper, na.rm = TRUE) & doseReponse)\n  ## Lack-of-fit test\n  pLoF <- modelFit(temp_fit) %>>% (.$`p value`[2])\n  ## Mean absolute percent error\n  MAPE <- mape(temp_fit)\n  ############################################################################################################\n  \n  # [Judge the subject's performance]\n  ############################################################################################################\n  if (n_subject == 1) {\n    # Criteria 1\n    ## Whether the rating of reference odor is significantly higher than that of solvent and clean air\n    ctrl2aov <- ctrl %>>% mutate(Valve = factor(Valve, levels = c(25, 1, 9, 17)))\n    RovB <- summary(glht(model = aov(IntensityRating ~ Valve, data = ctrl2aov), \n                         linfct = mcp(Valve = \"Dunnett\"), \n                         alternative = \"less\")) %>>% \n      (.$test$pvalues) %>>% \n      (.[1:3] >= 0.05) %>>% \n      (sum(.) == 0)\n  }\n  ############################################################################################################\n  \n  # [PART 2]\n  ## Plot data and line\n  ## Set up\n  ############################################################################################################\n  ## Plot settings\n  theme_list <- list(theme_bw(), \n                     theme(panel.grid.major = element_blank()), \n                     theme(panel.grid.minor = element_blank()), \n                     theme(legend.position = \"none\"))\n  \n  gLMS = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \n           \"Strongest imaginable \\nsensation of any kind\")\n  \n  plot_setting <- list(scale_color_hue(drop = FALSE), \n                       scale_fill_hue(drop = FALSE), \n                       ylab(\"Percieved intensity\"), \n                       xlab(ifelse(concType == \"percent\", \n                                   \"Concentration log[10](v/v) or log[10](w/v)\", \n                                   \"Concentration log[10](Molar)\")), \n                       geom_hline(yintercept = 0, linetype = \"dotted\", color = \"grey\"), \n                       scale_y_continuous(limits = c(0, 100), \n                                          breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), \n                                          labels = gLMS))\n  \n  ## Prepare the molecular structure to insert\n  myoid <- unique(test$oID) %>>% as.integer()\n  mysvg <- svgs[str_detect(svgs, sprintf(\"/%d_\", myoid))]\n  bitmaps <- rsvg(mysvg)\n  \n  ## Define the range of x-axis to show in the graph\n  ## Fixed x-axis make the potency of odor more clear\n  min_conc <- ifelse(concType == \"percent\", -8, -8)\n  max_conc <- ifelse(concType == \"percent\",  0,  2)\n  gap <- 1\n  ctrl_conc <- c(min_conc - 4*gap, min_conc - 3*gap, min_conc - 2*gap, min_conc - gap)\n  ctrl_info <- data_frame(Odor = ctrls, \n                          Solvent = ctrls[c(1, 2, 3, 3)], \n                          Concentration = sort(ctrl_conc, decreasing = TRUE), \n                          Valve = c(1, 9, 17, 25))\n  ############################################################################################################\n  \n  ## Preparing data for plot\n  ############################################################################################################\n  ctrl <- ctrl %>>% \n    dplyr::select(-Concentration) %>>% \n    arrange(Valve) %>>% \n    left_join(ctrl_info, by = c(\"Odor\", \"Solvent\", \"Valve\")) %>>% \n    arrange(Valve)\n  summary_test <- test %>>% \n    group_by(Odor, Seq, Concentration) %>>% \n    summarise(Intensity = mean(IntensityRating), se = se(IntensityRating)) %>>% \n    ungroup()\n  summary_ctrl <- ctrl %>>% \n    group_by(Odor, Valve, Concentration) %>>% \n    summarise(Intensity = mean(IntensityRating), se = se(IntensityRating)) %>>% \n    ungroup() %>>% \n    arrange(Valve)\n  ctrl <- ctrl %>>% rename(Intensity = IntensityRating)\n  test <- test %>>% rename(Intensity = IntensityRating)\n  ## New data for drawing curve and CI ribbon in the graph\n  # dose levels\n  new_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))\n  # predictions and confidence intervals\n  pm <- predict(temp_fit, newdata = new_data_for_plot, interval = \"confidence\") %>>% data.frame()\n  new_data_for_plot <- bind_cols(new_data_for_plot, pm) %>>% \n    mutate(Seq = seq) %>>% \n    rename(Intensity = Prediction)\n  ## annotations about the fitted parameters and the intensity of control odors\n  if (n_subject == 1) {\n    annot <- paste0(\"Slope (Std.Error): \",       round(slope, 2), \" (\", round(seSlope, 2), \") \", sSlope, \n                    \"\\nEC50 (Std.Error): \",      round(ec50,  2), \" (\", round(seEC50,  2), \") \", \n                    \"\\nTop (Std.Error): \",       round(peak,  2), \" (\", round(sePeak,  2), \") \", sPeak, \n                    \"\\nBottom (Std.Error): \",    round(base,  2), \" (\", round(seBase,  2), \") \", sBase, \n                    \"\\nTop > Bottom: \",          TovB, \n                    \"\\nMean absolute percent error: \", round(MAPE, 2), \n                    \"\\nLack-of-fit (p-value): \", round(pLoF, 2), \n                    \"\\nReference > Blank: \",     RovB, \n                    \"\\nTest-Retest (Pearson): \", round(testRetest_P, 2), \n                    \"\\nTest-Retest (Spearman): \",round(testRetest_S, 2), \n                    \"\\n1% Linalool: \",           round(summary_ctrl$Intensity[4], 2), \n                    \", Solvent: \",               round(summary_ctrl$Intensity[3], 2), \n                    \", \\nClean (M2): \",          round(summary_ctrl$Intensity[2], 2), \n                    \", Clean (M1): \",            round(summary_ctrl$Intensity[1], 2)) %>>% (data_frame(annotation = .))\n  } else {\n    annot <- paste0(\"Slope (Std.Error): \",       round(slope, 2), \" (\", round(seSlope, 2), \") \", sSlope, \n                    \"\\nEC50 (Std.Error): \",      round(ec50,  2), \" (\", round(seEC50,  2), \") \", \n                    \"\\nTop (Std.Error): \",       round(peak,  2), \" (\", round(sePeak,  2), \") \", sPeak, \n                    \"\\nBottom (Std.Error): \",    round(base,  2), \" (\", round(seBase,  2), \") \", sBase, \n                    \"\\nTop > Bottom: \",          TovB, \n                    \"\\nMean absolute percent error: \", round(MAPE, 2), \n                    \"\\nLack-of-fit (p-value): \", round(pLoF, 2), \n                    \"\\n1% Linalool: \",           round(summary_ctrl$Intensity[4], 2), \n                    \", Solvent: \",               round(summary_ctrl$Intensity[3], 2), \n                    \", \\nClean (M2): \",          round(summary_ctrl$Intensity[2], 2), \n                    \", Clean (M1): \",            round(summary_ctrl$Intensity[1], 2)) %>>% (data_frame(annotation = .))\n  }\n  ############################################################################################################\n  \n  ## base of plot\n  ############################################################################################################\n  dummy.data = data.frame(Concentration = -3, Intensity = 0)\n  plot <- ggplot(data = dummy.data, aes(x = Concentration, y = Intensity)) + \n    ggtitle(paste0(id)) + \n    theme_list + \n    plot_setting + \n    scale_x_continuous(limits = c(min_conc - 4*gap, max_conc), \n                       breaks = c(ctrl_conc, seq(min_conc, max_conc, by = 2)), \n                       labels = c(\"ref.\", \"solv.\", \"clean2\", \"clean1\", seq(min_conc, max_conc, by = 2)))\n  ## Molecular structure\n  plot <- plot + \n    annotation_raster(bitmaps, min_conc - 3.2*gap, min_conc + 0.7*gap, 26, 58) # Add a molecular structure to the plot  \n  ## Annotation\n  plot <- plot + \n    geom_text(data = annot, aes(x = min_conc - 3.7*gap, y = 100, label = annotation), \n              hjust = 0, vjust = 1, parse = FALSE, size = 4.5, color = \"black\")\n  ############################################################################################################\n  \n  ## main part of plot\n  ############################################################################################################\n  if (is.null(facet_by)) {\n    ## Plot of the each rating\n    plot <- plot + \n      geom_point(data = test, aes(color = Seq), size = 1.8) + # samples\n      geom_point(data = ctrl, color = \"black\") # ctrls\n    ## Plot of the means and standard errors of ratings at each concentration\n    plot <- plot + \n      geom_point(data = summary_test, aes(color = Seq), size = 1.8) + # means of samples\n      geom_errorbar(data = summary_test, aes(ymin = Intensity - se, ymax = Intensity + se, color = Seq), width = 0.1) + # error bars of samples\n      geom_point(data = summary_ctrl, color = \"black\") + # means of ctrls\n      geom_errorbar(data = summary_ctrl, aes(ymin = Intensity - se, ymax = Intensity + se), color = \"black\", width = 0.1) # error bars of ctrls\n    ## Plot the fitted curve and 95% CI\n    plot <- plot + \n      geom_line(data = new_data_for_plot, aes(color = Seq)) + \n      geom_ribbon(data = new_data_for_plot, aes(ymin = Lower, ymax = Upper, fill = Seq), alpha = 0.1)\n    ## Names of layers\n    plot$layers = plot$layers %>>% \n      (setNames(., c(\"hline\", \"structure\", \"annotation\", \"samples\", \"ctrls\", \n                     \"sampleMean\", \"sampleSE\", \"ctrlMean\", \"ctrlSE\", \"curve\", \"ribbon\")))\n    \n  } else {\n    ## Plot of the each rating\n    plot <- plot +\n      geom_point(data = test, aes(color = Seq), size = 1.8) + # samples\n      geom_point(data = ctrl, color = \"black\") # ctrls\n    ## Facet\n    plot <- plot + \n      facet_wrap(facet_by, ncol = 4) + \n      theme(axis.text.y = element_text(size = 8)) + \n      theme(axis.text.x = element_text(size = 9, angle = 270, hjust = 0, vjust = 0.2))\n    ## Names of layers\n    plot$layers = plot$layers %>>% (setNames(., c(\"hline\", \"structure\", \"annotation\", \"samples\", \"ctrls\")))\n    \n  }\n  ############################################################################################################\n  \n  # [Output]\n  ############################################################################################################\n  if (n_subject == 1) {\n    output <- data_frame(Odor = odor, RovB = RovB, TovB = TovB, MAPE = MAPE, pLoF = pLoF)\n  } else {\n    output <- data_frame(Odor = odor, Slope = slope, Top = peak, Bottom = base, EC50 = ec50, \n                         pSlope = pSlope, pTop = pPeak, pBottom = pBase, \n                         seSlope = seSlope, seTop = sePeak, seBottom = seBase, seEC50 = seEC50, \n                         TovB = TovB, MAPE = MAPE, pLoF = pLoF)\n  }\n  outList <- list(df = output, plot = plot, fit = temp_fit)\n  return(outList)\n  ############################################################################################################\n}\n\n# Function for fit DR with upper limit of Top parameter\nfit_plot_dr_fixedTop <- function(odorkey, data, ctrls, conc_Solvent, conc_Air, concType = \"molar\", facet_by = NULL, svgs = SVGs) {\n  \n  # [Part 0]\n  ## Set up\n  ############################################################################################################\n  if (concType == \"molar\") { data$Concentration <- data$MolarConc }\n  data <- data %>>% mutate(Concentration = log10(Concentration))\n  conc_Solvent = log10(conc_Solvent)\n  conc_Air = log10(conc_Air)\n  data[data$Odor %in% c(\"Paraffin oil\"), \"Concentration\"] <- conc_Solvent\n  data[data$Odor %in% c(\"Clean air\"), \"Concentration\"] <- conc_Air\n  subject   <- unique(data$Subject)\n  n_subject <- length(subject)\n  odor <- data %>>% filter(InstockKey == odorkey) %>>% (.$Odor) %>>% unique()\n  seq  <- data %>>% filter(InstockKey == odorkey) %>>% (.$Seq) %>>% unique()\n  ctrl <- data %>>% filter(Odor %in% ctrls)\n  test <- data %>>% filter(!(Odor %in% ctrls))\n  \n  if (n_subject == 1) {\n    id <- paste0(odor, \" (Hill modeling); Subject #\", subject)\n    testRetest_P <- unique(data$testRetest.P)\n    testRetest_S <- unique(data$testRetest.S)\n  } else {\n    id <- paste0(odor, \" (Hill modeling); \", n_subject, \" subjects\")\n  }\n  cat(\"\\nFitting...\", id, \"\\n\")\n  ############################################################################################################\n  \n  # [Part 1]\n  ## Fit data to the model of Hill\n  ############################################################################################################\n  temp_data <- data %>>% filter(Odor %in% c(\"Clean air\", \"Paraffin oil\", odor))\n  temp_conc <- temp_data %>>% (.$Concentration) %>>% sort() %>>% unique()\n  min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)])\n  max_conc <- max(temp_conc)\n  form <- formula(\"IntensityRating ~ Concentration\")\n  # Use fixed Top value calculated by the following equation\n  # Top = 17.14 * (log10VP[mmHg]+10)^3 / 500 + 14.79\n  VP = temp_data %>>% filter(Odor == odor) %>>% (.$VP) %>>% unique()\n  top = 17.14 * VP + 14.79\n  max_int = test %>>% \n    group_by(Concentration) %>>% \n    summarise(mean = mean(IntensityRating), sd = sd(IntensityRating)) %>>% \n    ungroup() %>>% \n    mutate(mean_sd = mean + sd) %>>% \n    arrange(desc(mean)) %>>% \n    (.[1, \"mean_sd\"]) %>>% \n    as.numeric()\n  top_upper = max(top, max_int)\n  temp_fit <- drm(form, \n                  data = temp_data, \n                  lowerl = c(-4*log(10), 0, 0, min_conc), \n                  upperl = c(0, top_upper, top_upper, NA), \n                  fct = L.4())\n  ############################################################################################################\n  \n  ## Fitted parameters\n  ############################################################################################################\n  # Robust standard errors against misspecification of the distributional assumptions (sandwich estimator) and\n  # Adjusted p-values controlling the family-wise error rate (simultaneous inference)\n  tryCatch({ summary_fit <- summary(glht(temp_fit, vcov = sandwich)) }, error = function(e) message(e) )\n  if (exists(\"summary_fit\")) {\n    ## Extract the fitted parameters and effective doses\n    # Coefficients of fitted model\n    coefs <- summary_fit$test$coefficients\n    # The L.4 function, f(x) = c + (d-c)/(1+exp(b*(x-e))), regards x and e as log(Concentration) and log(EC50), respectively.\n    # However, the values we put in x and e are log10(Concentration) and log10(EC50) because we want to know EC50 and its standard error in log10 scale rather than in log scale.\n    # This inconsistency make the function return the coefficient of slope, b, that are multiplied by log(10).\n    # So, we needs to devide b by log(10) to obtain the true value of the slope of the curve\n    slope <- coefs[\"b:(Intercept)\"] %>>% as.numeric() %>>% (./log(10))\n    base  <- coefs[\"c:(Intercept)\"] %>>% as.numeric()\n    peak  <- coefs[\"d:(Intercept)\"] %>>% as.numeric()\n    ec50  <- coefs[\"e:(Intercept)\"] %>>% as.numeric()\n    # p-values of fitted model (if the p-value is under 0.05, the coefficients is significantly different from 0)\n    pvals <- summary_fit$test$pvalues\n    pSlope <- pvals[1] # should be significant\n    pBase  <- pvals[2] # should NOT be significant\n    pPeak  <- pvals[3] # should be significant\n    sSlope <- pSlope %>>% (ifelse(. < 0.001, \"***\", ifelse(. < 0.01, \"**\", ifelse(. < 0.05, \"*\", \" n.s.\"))))\n    sBase  <- pBase  %>>% (ifelse(. < 0.001, \"***\", ifelse(. < 0.01, \"**\", ifelse(. < 0.05, \"*\", \" n.s.\"))))\n    sPeak  <- pPeak  %>>% (ifelse(. < 0.001, \"***\", ifelse(. < 0.01, \"**\", ifelse(. < 0.05, \"*\", \" n.s.\"))))\n    # Standard error of parameters\n    sigmas <- summary_fit$test$sigma\n    seSlope <- sigmas[\"b:(Intercept)\"] %>>% as.numeric() %>>% (./log(10))\n    seBase  <- sigmas[\"c:(Intercept)\"] %>>% as.numeric()\n    sePeak  <- sigmas[\"d:(Intercept)\"] %>>% as.numeric()\n    seEC50  <- sigmas[\"e:(Intercept)\"] %>>% as.numeric()\n  } else {\n    summary_fit <- coeftest(temp_fit, vcov = sandwich)\n    coefs <- summary_fit[, \"Estimate\"]\n    slope <- coefs[\"b:(Intercept)\"] %>>% as.numeric() %>>% (./log(10))\n    base  <- coefs[\"c:(Intercept)\"] %>>% as.numeric()\n    peak  <- coefs[\"d:(Intercept)\"] %>>% as.numeric()\n    ec50  <- coefs[\"e:(Intercept)\"] %>>% as.numeric()\n    pvals <- summary_fit[, \"Pr(>|t|)\"]\n    pSlope <- pvals[\"b:(Intercept)\"] # should be significant\n    pBase  <- pvals[\"c:(Intercept)\"] # should NOT be significant\n    pPeak  <- pvals[\"d:(Intercept)\"] # should be significant\n    sSlope <- pSlope %>>% (ifelse(. < 0.001, \"***\", ifelse(. < 0.01, \"**\", ifelse(. < 0.05, \"*\", \" n.s.\"))))\n    sBase  <- pBase  %>>% (ifelse(. < 0.001, \"***\", ifelse(. < 0.01, \"**\", ifelse(. < 0.05, \"*\", \" n.s.\"))))\n    sPeak  <- pPeak  %>>% (ifelse(. < 0.001, \"***\", ifelse(. < 0.01, \"**\", ifelse(. < 0.05, \"*\", \" n.s.\"))))\n    # Standard error of parameters\n    sigmas <- summary_fit[, \"Std. Error\"]\n    seSlope <- sigmas[\"b:(Intercept)\"] %>>% as.numeric() %>>% (./log(10))\n    seBase  <- sigmas[\"c:(Intercept)\"] %>>% as.numeric()\n    sePeak  <- sigmas[\"d:(Intercept)\"] %>>% as.numeric()\n    seEC50  <- sigmas[\"e:(Intercept)\"] %>>% as.numeric()\n  }\n  ############################################################################################################\n  \n  ## Check if there is dose-response relationship.\n  ############################################################################################################\n  ## Comparing the dese-response model to a model where the response is on average constant and hence not changing with dose.\n  doseReponse <- as.numeric(noEffect(temp_fit)[\"p-value\"]) < 0.05\n  ## Top is higher than bottom?\n  new_data <- expand.grid(Concentration = seq(conc_Air, max_conc, length.out = 1000)) # range of concentrations\n  pred <- predict(temp_fit, newdata = new_data, interval = \"confidence\") %>>% data.frame()\n  TovB <- (max(pred$Lower, na.rm = TRUE) > min(pred$Upper, na.rm = TRUE) & doseReponse)\n  ## Lack-of-fit test\n  pLoF <- modelFit(temp_fit) %>>% (.$`p value`[2])\n  ## Mean absolute percent error\n  MAPE <- mape(temp_fit)\n  ############################################################################################################\n  \n  # [Part 2]\n  ## Plot data and line\n  ## Set up\n  ############################################################################################################\n  ## Plot settings\n  theme_list <- list(theme_bw(), \n                     theme(panel.grid.major = element_blank()), \n                     theme(panel.grid.minor = element_blank()), \n                     theme(legend.position = \"none\"))\n  \n  gLMS = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \n           \"Strongest imaginable \\nsensation of any kind\")\n  \n  plot_setting <- list(scale_color_hue(drop = FALSE), \n                       scale_fill_hue(drop = FALSE), \n                       ylab(\"Percieved intensity\"), \n                       xlab(ifelse(concType == \"percent\", \n                                   \"Concentration log[10](v/v) or log[10](w/v)\", \n                                   \"Concentration log[10](Molar)\")), \n                       geom_hline(yintercept = 0, linetype = \"dotted\", color = \"grey\"), \n                       scale_y_continuous(limits = c(0, 100), \n                                          breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), \n                                          labels = gLMS))\n  \n  ## Prepare the molecular structure to insert\n  myoid <- unique(test$oID) %>>% as.integer()\n  mysvg <- svgs[str_detect(svgs, sprintf(\"/%d_\", myoid))]\n  bitmaps <- rsvg(mysvg)\n  \n  ## Define the range of x-axis to show in the graph\n  ## Fixed x-axis make the potency of odor more clear\n  min_conc <- ifelse(concType == \"percent\", -8, -8)\n  max_conc <- ifelse(concType == \"percent\",  0,  2)\n  gap <- 1\n  ctrl_conc <- c(min_conc - 4*gap, min_conc - 3*gap, min_conc - 2*gap, min_conc - gap)\n  ctrl_info <- data_frame(Odor = ctrls, \n                          Solvent = ctrls[c(1, 2, 3, 3)], \n                          Concentration = sort(ctrl_conc, decreasing = TRUE), \n                          Valve = c(1, 9, 17, 25))\n  ############################################################################################################\n  \n  ## Preparing data for plot\n  ############################################################################################################\n  ctrl <- ctrl %>>% \n    dplyr::select(-Concentration) %>>% \n    arrange(Valve) %>>% \n    left_join(ctrl_info, by = c(\"Odor\", \"Solvent\", \"Valve\")) %>>% \n    arrange(Valve)\n  summary_test <- test %>>% \n    group_by(Odor, Seq, Concentration) %>>% \n    summarise(Intensity = mean(IntensityRating), se = se(IntensityRating)) %>>% \n    ungroup()\n  summary_ctrl <- ctrl %>>% \n    group_by(Odor, Valve, Concentration) %>>% \n    summarise(Intensity = mean(IntensityRating), se = se(IntensityRating)) %>>% \n    ungroup() %>>% \n    arrange(Valve)\n  ctrl <- ctrl %>>% rename(Intensity = IntensityRating)\n  test <- test %>>% rename(Intensity = IntensityRating)\n  ## New data for drawing curve and CI ribbon in the graph\n  # dose levels\n  new_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))\n  # predictions and confidence intervals\n  pm <- predict(temp_fit, newdata = new_data_for_plot, interval = \"confidence\") %>>% data.frame()\n  new_data_for_plot <- bind_cols(new_data_for_plot, pm) %>>% \n    mutate(Seq = seq) %>>% \n    rename(Intensity = Prediction)\n  ## annotations about the fitted parameters and the intensity of control odors\n  annot <- paste0(\"Slope (Std.Error): \",       round(slope, 2), \" (\", round(seSlope, 2), \") \", sSlope, \n                  \"\\nEC50 (Std.Error): \",      round(ec50,  2), \" (\", round(seEC50,  2), \") \", \n                  \"\\nTop (Std.Error): \",       round(peak,  2), \" (\", round(sePeak,  2), \") \", sPeak, \n                  \"\\nBottom (Std.Error): \",    round(base,  2), \" (\", round(seBase,  2), \") \", sBase, \n                  \"\\nTop > Bottom: \",          TovB, \n                  \"\\n Upper limit of Top: \",   round(top_upper, 2), \n                  \"\\nMean absolute percent error: \", round(MAPE, 2), \n                  \"\\nLack-of-fit (p-value): \", round(pLoF, 2), \n                  \"\\n1% Linalool: \",           round(summary_ctrl$Intensity[4], 2), \n                  \", Solvent: \",               round(summary_ctrl$Intensity[3], 2), \n                  \", \\nClean (M2): \",          round(summary_ctrl$Intensity[2], 2), \n                  \", Clean (M1): \",            round(summary_ctrl$Intensity[1], 2)) %>>% (data_frame(annotation = .))\n  ############################################################################################################\n  \n  ## base of plot\n  ############################################################################################################\n  dummy.data = data.frame(Concentration = -3, Intensity = 0)\n  plot <- ggplot(data = dummy.data, aes(x = Concentration, y = Intensity)) + \n    ggtitle(paste0(id)) + \n    theme_list + \n    plot_setting + \n    scale_x_continuous(limits = c(min_conc - 4*gap, max_conc), \n                       breaks = c(ctrl_conc, seq(min_conc, max_conc, by = 2)), \n                       labels = c(\"ref.\", \"solv.\", \"clean2\", \"clean1\", seq(min_conc, max_conc, by = 2)))\n  ## Molecular structure\n  plot <- plot + \n    annotation_raster(bitmaps, min_conc - 3.2*gap, min_conc + 0.7*gap, 26, 58) # Add a molecular structure to the plot  \n  ## Annotation\n  plot <- plot + \n    geom_text(data = annot, aes(x = min_conc - 3.7*gap, y = 100, label = annotation), \n              hjust = 0, vjust = 1, parse = FALSE, size = 4.5, color = \"black\")\n  ############################################################################################################\n  \n  ## main part of plot\n  ############################################################################################################\n  if (is.null(facet_by)) {\n    ## Plot of the each rating\n    plot <- plot + \n      geom_point(data = test, aes(color = Seq), size = 1.8) + # samples\n      geom_point(data = ctrl, color = \"black\") # ctrls\n    ## Plot of the means and standard errors of ratings at each concentration\n    plot <- plot + \n      geom_point(data = summary_test, aes(color = Seq), size = 1.8) + # means of samples\n      geom_errorbar(data = summary_test, aes(ymin = Intensity - se, ymax = Intensity + se, color = Seq), width = 0.1) + # error bars of samples\n      geom_point(data = summary_ctrl, color = \"black\") + # means of ctrls\n      geom_errorbar(data = summary_ctrl, aes(ymin = Intensity - se, ymax = Intensity + se), color = \"black\", width = 0.1) # error bars of ctrls\n    ## Plot the fitted curve and 95% CI\n    plot <- plot + \n      geom_line(data = new_data_for_plot, aes(color = Seq)) + \n      geom_ribbon(data = new_data_for_plot, aes(ymin = Lower, ymax = Upper, fill = Seq), alpha = 0.1)\n    ## Names of layers\n    plot$layers = plot$layers %>>% \n      (setNames(., c(\"hline\", \"structure\", \"annotation\", \"samples\", \"ctrls\", \n                     \"sampleMean\", \"sampleSE\", \"ctrlMean\", \"ctrlSE\", \"curve\", \"ribbon\")))\n    \n  } else {\n    ## Plot of the each rating\n    plot <- plot +\n      geom_point(data = test, aes(color = Seq), size = 1.8) + # samples\n      geom_point(data = ctrl, color = \"black\") # ctrls\n    ## Facet\n    plot <- plot + \n      facet_wrap(facet_by, ncol = 4) + \n      theme(axis.text.y = element_text(size = 8)) + \n      theme(axis.text.x = element_text(size = 9, angle = 270, hjust = 0, vjust = 0.2))\n    ## Names of layers\n    plot$layers = plot$layers %>>% (setNames(., c(\"hline\", \"structure\", \"annotation\", \"samples\", \"ctrls\")))\n    \n  }\n  ############################################################################################################\n  \n  # [Output]\n  ############################################################################################################\n  output <- data_frame(Odor = odor, Slope = slope, Top = peak, Bottom = base, EC50 = ec50, \n                       pSlope = pSlope, pTop = pPeak, pBottom = pBase, \n                       seSlope = seSlope, seTop = sePeak, seBottom = seBase, seEC50 = seEC50, \n                       TovB = TovB, MAPE = MAPE, pLoF = pLoF)\n  outList <- list(df = output, plot = plot, fit = temp_fit)\n  return(outList)\n  ############################################################################################################\n}\n\nplot_scale_training <- function(data, subject = \"All subjects\", type = \"point\", annotation = TRUE, alpha = 0.8, print_plot = TRUE) {\n  \n  theme_list <- list(theme_bw(), theme(panel.grid.major = element_blank()), theme(panel.grid.minor = element_blank()), theme(legend.position = \"none\"))\n  data <- data %>>% mutate(Subject = paste0(\"# \", Subject))\n  \n  plot <- ggplot(data, aes(x = Question, y = IntensityRating)) + \n    theme_list + \n    labs(title = paste0(\"Remembered or imagined sensations (Scale use training); \", subject), x = \"\", y = \"Rated Intensity\") + \n    theme(axis.text.x = element_text(size = 9, angle = 270, hjust = 0, vjust = 0.5)) + \n    geom_hline(yintercept = 0, linetype = \"dotted\", color = \"grey\") + geom_hline(yintercept = 100, linetype = \"dotted\", color = \"grey\") + \n    scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \"Strongest imaginable \\nsensation of any kind\"))\n  \n  if (type == \"point\") {\n    plot <- plot + geom_point(aes(color = Sensation), size = 2, alpha = alpha)\n    if (annotation) {\n      plot <- plot + geom_label(aes(label = Subject, fill = Sensation), color = \"white\", fontface = \"bold\", hjust = 0, nudge_x = 0.08, vjust = 0, nudge_y = 0.5, size = 3, alpha = alpha)\n    }\n  }\n  if (type == \"bar\") {\n    plot <- plot + geom_bar(aes(fill = Sensation), stat = \"identity\")\n  }\n  if (print_plot) {\n    print(plot)\n  }\n  \n  return(plot)\n  \n}\n\ntestRetest <- function(data, method = \"pearson\") {\n  # A function to calculate the correlation between the same stimuli\n  data = data %>>% group_by(Valve) %>>% mutate(N = sprintf(\"N%d\", row_number(TrialNo))) %>>% ungroup() %>>% dplyr::select(Valve, N, IntensityRating)\n  data_wide = data %>>% spread(key = N, value = IntensityRating) \n  data_long = data_wide %>>% (bind_rows(dplyr::select(., -N3) %>>% rename(V1 = N1, V2 = N2), \n                                        dplyr::select(., -N1) %>>% rename(V1 = N2, V2 = N3), \n                                        dplyr::select(., -N2) %>>% rename(V1 = N3, V2 = N1))) %>>% dplyr::select(Valve, V1, V2) %>>% na.omit()\n  test_retest_cor = cor(data_long$V1, data_long$V2, method = method)\n  return(test_retest_cor)\n}\n\nmake2digitsNames <- function(x, label = \"block\") {\n  x <- x %>>% as.character() %>>% as.numeric() # In the case of the class of x is a character or a factor\n  out <- paste0(label, ifelse(x < 10, paste0(\"0\", x), x)) # If x is less than 10, add 0 before x.\n  return(out)\n}\n\nextractDate <- function(path, file) {\n  date <- map(file, \n              ~ read_html(paste0(path, \"/DataAnalysis/data/Raw/\", .x)) %>>% \n                html_text() %>>% \n                str_split(\" Header End \") %>>% (.[[1]][1]) %>>% \n                str_extract_all(\"SessionDate: \\\\d+-\\\\d+-\\\\d+\") %>>% \n                str_extract_all(\"\\\\d+-\\\\d+-\\\\d+\") %>>% unlist()) %>>% unlist()\n  return(date)\n}\n\n# Paper figure\nfit_plot_dr_paper <- function(odorkey, data, ctrls, conc_Solvent, conc_Air, concType = \"molar\", facet_by = NULL, svgs = SVGs) {\n  \n  # [Part 0]\n  ## Set up\n  ############################################################################################################\n  if (concType == \"molar\") { data$Concentration <- data$MolarConc }\n  data <- data %>>% mutate(Concentration = log10(Concentration))\n  conc_Solvent = log10(conc_Solvent)\n  conc_Air = log10(conc_Air)\n  data[data$Odor %in% c(\"Paraffin oil\"), \"Concentration\"] <- conc_Solvent\n  data[data$Odor %in% c(\"Clean air\"), \"Concentration\"] <- conc_Air\n  subject   <- unique(data$Subject)\n  n_subject <- length(subject)\n  odor <- data %>>% filter(InstockKey == odorkey) %>>% (.$Odor) %>>% unique()\n  seq  <- data %>>% filter(InstockKey == odorkey) %>>% (.$Seq) %>>% unique()\n  ctrl <- data %>>% filter(Odor %in% ctrls)\n  test <- data %>>% filter(!(Odor %in% ctrls))\n  \n  if (n_subject == 1) {\n    id <- paste0(odor, \" (Hill modeling); Subject #\", subject)\n    testRetest_P <- unique(data$testRetest.P)\n    testRetest_S <- unique(data$testRetest.S)\n  } else {\n    id <- paste0(odor, \" (Hill modeling); \", n_subject, \" subjects\")\n  }\n  cat(\"\\nFitting...\", id, \"\\n\")\n  ############################################################################################################\n  \n  # [PART 1]\n  ## Fit data to the model of Hill\n  ############################################################################################################\n  temp_data <- data %>>% filter(Odor %in% c(\"Clean air\", \"Paraffin oil\", odor))\n  temp_conc <- temp_data %>>% (.$Concentration) %>>% sort() %>>% unique()\n  min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)])\n  max_conc <- max(temp_conc)\n  form <- formula(\"IntensityRating ~ Concentration\")\n  # Fit the data by Hill's model with constraints\n  temp_fit <- drm(form, \n                  data = temp_data, \n                  lowerl = c(-4*log(10), 0, 0, min_conc), \n                  upperl = c(0, 100, 100, NA), \n                  fct = L.4())\n  ############################################################################################################\n  \n  # [PART 2]\n  ## Plot data and line\n  ## Set up\n  ############################################################################################################\n  ## Plot settings\n  theme_list <- list(theme_bw(), \n                     theme(panel.grid.major = element_blank()), \n                     theme(panel.grid.minor = element_blank()), \n                     theme(legend.position = \"none\"), \n                     theme(axis.text.x = element_text(angle = 45, hjust = 1)))\n  \n  gLMS = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \n           \"Strongest imaginable \\nsensation of any kind\")\n  \n  plot_setting <- list(scale_color_hue(drop = FALSE), \n                       scale_fill_hue(drop = FALSE), \n                       ylab(\"Percieved intensity\"), \n                       xlab(\"Concentration\"), \n                       geom_hline(yintercept = 0, linetype = \"dotted\", color = \"grey\"), \n                       scale_y_continuous(limits = c(0, 100), \n                                          breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), \n                                          labels = gLMS))\n  \n  ## Prepare the molecular structure to insert\n  myoid <- unique(test$oID) %>>% as.integer()\n  mysvg <- svgs[str_detect(svgs, sprintf(\"/%d_\", myoid))]\n  bitmaps <- rsvg(mysvg)\n  \n  ## Define the range of x-axis to show in the graph\n  ## Fixed x-axis make the potency of odor more clear\n  min_conc <- ifelse(concType == \"percent\", -8, -8)\n  max_conc <- ifelse(concType == \"percent\",  0,  2)\n  gap <- 1\n  ctrl_conc <- c(min_conc - 4*gap, min_conc - 3*gap, min_conc - 2*gap, min_conc - gap)\n  ctrl_info <- data_frame(Odor = ctrls, \n                          Solvent = ctrls[c(1, 2, 3, 3)], \n                          Concentration = sort(ctrl_conc, decreasing = TRUE), \n                          Valve = c(1, 9, 17, 25))\n  ############################################################################################################\n  \n  ## Preparing data for plot\n  ############################################################################################################\n  ctrl <- ctrl %>>% \n    dplyr::select(-Concentration) %>>% \n    arrange(Valve) %>>% \n    left_join(ctrl_info, by = c(\"Odor\", \"Solvent\", \"Valve\")) %>>% \n    arrange(Valve)\n  summary_test <- test %>>% \n    group_by(Odor, Seq, Concentration) %>>% \n    summarise(Intensity = mean(IntensityRating), se = se(IntensityRating)) %>>% \n    ungroup()\n  summary_ctrl <- ctrl %>>% \n    group_by(Odor, Valve, Concentration) %>>% \n    summarise(Intensity = mean(IntensityRating), se = se(IntensityRating)) %>>% \n    ungroup() %>>% \n    arrange(Valve)\n  ctrl <- ctrl %>>% rename(Intensity = IntensityRating)\n  test <- test %>>% rename(Intensity = IntensityRating)\n  ## New data for drawing curve and CI ribbon in the graph\n  # dose levels\n  new_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))\n  # predictions and confidence intervals\n  pm <- predict(temp_fit, newdata = new_data_for_plot, interval = \"confidence\") %>>% data.frame()\n  new_data_for_plot <- bind_cols(new_data_for_plot, pm) %>>% \n    mutate(Seq = seq) %>>% \n    rename(Intensity = Prediction)\n  ############################################################################################################\n  \n  ## base of plot\n  ############################################################################################################\n  dummy.data = data.frame(Concentration = -3, Intensity = 0)\n  plot <- ggplot(data = dummy.data, aes(x = Concentration, y = Intensity)) + \n    theme_list + \n    plot_setting + \n    scale_x_continuous(limits = c(min_conc - 4*gap, max_conc), \n                       breaks = c(ctrl_conc, seq(min_conc, max_conc, by = 2)), \n                       labels = c(\"reference\", \"solvent\", \"clean air\", \"clean air\", \n                                  expression(10^{-8}), expression(10^{-6}), expression(10^{-4}), expression(10^{-2}), expression(10), expression(10^{2})))\n  \n  ## Molecular structure\n  plot <- plot + \n    annotation_raster(bitmaps, min_conc - 3.2*gap, min_conc + 2.7*gap, 50, 95) # Add a molecular structure to the plot  \n  ## Annotation\n  plot <- plot + \n    geom_text(aes(x = min_conc - 3.2*gap, y = 100, label = paste0(odor)), \n              hjust = 0, vjust = 1, parse = FALSE, size = 4.5, color = \"black\")\n  ############################################################################################################\n  \n  ## main part of plot\n  ############################################################################################################\n  ## Plot of the each rating\n  plot <- plot + \n    geom_point(data = test, aes(color = Seq)) + # samples\n    geom_point(data = ctrl, color = \"black\") # ctrls\n  ## Plot of the means and standard errors of ratings at each concentration\n  plot <- plot + \n    geom_point(data = summary_test, aes(color = Seq)) + # means of samples\n    geom_errorbar(data = summary_test, aes(ymin = Intensity - se, ymax = Intensity + se, color = Seq), width = 0.1) + # error bars of samples\n    geom_point(data = summary_ctrl, color = \"black\") + # means of ctrls\n    geom_errorbar(data = summary_ctrl, aes(ymin = Intensity - se, ymax = Intensity + se), color = \"black\", width = 0.1) # error bars of ctrls\n  ## Plot the fitted curve and 95% CI\n  plot <- plot + \n    geom_line(data = new_data_for_plot, aes(color = Seq)) + \n    geom_ribbon(data = new_data_for_plot, aes(ymin = Lower, ymax = Upper, fill = Seq), alpha = 0.1)\n  ## Names of layers\n  plot$layers = plot$layers %>>% \n    (setNames(., c(\"hline\", \"structure\", \"annotation\", \"samples\", \"ctrls\", \n                   \"sampleMean\", \"sampleSE\", \"ctrlMean\", \"ctrlSE\", \"curve\", \"ribbon\")))\n  ############################################################################################################\n  \n  # [Output]\n  ############################################################################################################\n  outList <- list(plot = plot)\n  return(outList)\n  ############################################################################################################\n}\n",
    "created" : 1502118905142.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4178843287",
    "id" : "7089C67",
    "lastKnownWriteTime" : 1493670026,
    "path" : "/Volumes/mainland/Projects/Suprathreshold/DataAnalysis/code/dr function.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}