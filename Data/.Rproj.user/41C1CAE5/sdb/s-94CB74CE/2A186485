{
    "contents" : "rm(list = ls())\n# Packages\nloadPackages <- function(package) {\n  package <- as.character(package)\n  if (require(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {\n    cat(sprintf(\"%s is loaded correctly\\n\", package))\n  } else {\n    cat(sprintf(\"trying to install %s...\\n\", package))\n    install.packages(package)\n    stopifnot(require(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE))\n    cat(sprintf(\"could not install %s\\n\", package))\n  }\n}\nloadPackages(\"drc\")\nloadPackages(\"sandwich\")\nloadPackages(\"lmtest\")\nloadPackages(\"multcomp\")\nloadPackages(\"readr\")\nloadPackages(\"dplyr\")\nloadPackages(\"tibble\")\nloadPackages(\"tidyr\")\nloadPackages(\"purrr\")\nloadPackages(\"rlist\")\nloadPackages(\"stringr\")\nloadPackages(\"pipeR\")\nloadPackages(\"rvest\")\nloadPackages(\"ggplot2\")\nloadPackages(\"gridExtra\")\nloadPackages(\"rsvg\")\nloadPackages(\"naturalsort\")\n\n# Path\npath <- getwd() %>>% str_split(\"code\") %>>% (.[[1]][1])\nSVGs <- path %>>% paste0(\"figure/structures\") %>>% list.files(full.names = T)\n# Functions\nsource(paste0(path, \"code/dr function.R\"))\n\n# Subject and experiment information\n##### Fill ME #####\nsubject = \"983\"         # fill the subject number\nblock = 22            # fill the block number\nctrls = c(\"Clean air\", \"Clean air\", \"Paraffin oil\", \"1% Linalool\")\nbase = \"Paraffin oil\" # Include solvent or clean air in the fitting data\nconcSolvent = 1e-12   # Hyperparameters for fitting\nconcAir = 1e-20       # Hyperparameters for fitting\n###################\n\n# Block5 day1, block7 day1, block18 day3-5, block21 subject 12\nirregular1 = c(\"-18-5.txt\", \"-4-5.txt\", \"-52-5.txt\", \n               \"-12-7.txt\", \"-4-7.txt\", \"-52-7.txt\", \"-24-7.txt\",\n               \"-19-18.txt\", \"-13-18.txt\", \"-56-18.txt\", \"-26-18.txt\", \"-17-18.txt\", \"-46-18.txt\", \"-7-18.txt\", \"-37-18.txt\", \"-30-18.txt\", \n               \"-12-21.txt\", \n               \"-4-26.txt\", \"-12-26.txt\", \"-37-26.txt\", \"-52-26.txt\", \"-63-26.txt\", \"-73-26.txt\", \n               \"-95-24.txt\", \"-912-24.txt\", \"-913-24.txt\", \"-930-24.txt\", \"-937-24.txt\", \"-952-24.txt\", \"-953-24.txt\", \"-962-24.txt\", \"-973-24.txt\", \"-975-24.txt\", \"-977-24.txt\", \"-981-24.txt\", \"-983-24.txt\", \"-985-24.txt\", \"-988-24.txt\", \"-990-24.txt\")\n# Block5 day2 morning or block7 day2 and day3 morning\nirregular2 = c(\"-21-5.txt\", \"-3-5.txt\", \"-5-5.txt\", \n               \"-21-7.txt\", \"-35-7.txt\", \"-5-7.txt\", \"-13-7.txt\", \"-20-7.txt\", \"-19-7.txt\")\n\n############################################################################################################\n# Directory and names of input and output files.\nexp_type <- make2digitsNames(block)\npath2file <- paste0(path, \"data/Raw/\", exp_type, \"/\")\nmyFileName <- list.files(path = path2file) %>>% (.[str_detect(., paste0(\"-\", subject, \"-\", block))])\nmyFileName_train <- myFileName %>>% (.[str_detect(., \"Scale\")]) %>>% (.[1])\nmyFileName_test  <- myFileName %>>% (.[str_detect(., \"Supra\")]) %>>% \n  (. [!. %in% c(\"Supra with games new-53-131.txt\", \"Supra with games new-53-132.txt\")])\noutFileName <- paste(\"Supra\", subject, block, sep = \"-\")\n\n############################################################################################################\n# Evaluation of participant's use of the gLMS\ntryCatch({\n  raw_data_train <- read_html(paste0(path2file, myFileName_train)) %>>% html_text()\n}, error = function(e) cat(\"Train data does not exist.\"))\nif (exists(\"raw_data_train\")) {\n  ScaleTraining_result <- getTrainResults(myFileName_train, path, subject, exp_type, block)\n  # Save plot and data\n  pdf(paste0(path, \"figure/\", exp_type, \"/Each subject/\", outFileName, \" sacle use training.pdf\"), width = 10, height = 8)\n  SessionDate <- raw_data_train %>>% str_split(\" Header End \") %>>% (.[[1]][1]) %>>% \n    str_extract_all(\"SessionDate: \\\\d+-\\\\d+-\\\\d+\") %>>% str_extract_all(\"\\\\d+-\\\\d+-\\\\d+\") %>>% unlist()\n  SessionTime <- raw_data_train %>>% str_split(\" Header End \") %>>% (.[[1]][1]) %>>% \n    str_extract_all(\"SessionTime: \\\\d+:\\\\d+:\\\\d+\") %>>% str_extract_all(\"\\\\d+:\\\\d+:\\\\d+\") %>>% unlist()\n  SessionInfo <- paste(SessionDate, SessionTime)\n  do_quietly <- ScaleTraining_result %>>% \n    plot_scale_training(subject = paste0(\"Subject #\", subject, \"\\n\", SessionInfo), type = \"point\", \n                        annotation = FALSE, alpha = 1, print_plot = TRUE)\n  dev.off()\n  write_csv(ScaleTraining_result, paste0(path, \"data/Processed/\", exp_type, \"/\", outFileName, \" scale use training.csv\"))\n  rm(raw_data_train)\n}\n\n############################################################################################################\n# Odor information\nis.irre1 = str_detect(myFileName_test, irregular1) %>>% (max(.) == 1)\nis.irre2 = str_detect(myFileName_test, irregular2) %>>% (max(.) == 1)\nif (is.irre1) {\n  odor_info <- read_csv(paste0(path, \"data/OdorInfo/\", exp_type, \"-1.csv\"), col_types = \"ddccddddddddcdcd\")\n} else if (is.irre2) {\n  odor_info <- read_csv(paste0(path, \"data/OdorInfo/\", exp_type, \"-2.csv\"), col_types = \"ddccddddddddcdcd\")\n} else {\n  odor_info <- read_csv(paste0(path, \"data/OdorInfo/\", exp_type, \".csv\"),   col_types = \"ddccddddddddcdcd\")\n}\nodor_info <- odor_info %>>% \n  gather(key = Level, value = Concentration, A:G) %>>% \n  arrange(Seq, Level) %>>% \n  mutate(Valve = c(rev(2:8), rev(10:16), rev(18:24), rev(26:32)))\nodorsList <- unique(odor_info$Odor) %>>% (.[. != \"Diluents\"]) %>>% (.[!is.na(.)])\nodorkeys <- unique(odor_info$InstockKey) %>>% (.[!is.na(.)])\n# Read test results of all subjects\nall_result <- getExpResults(myFileName_test, path, subject, exp_type, block, ctrls, concSolvent, concAir) %>>% \n  filter(!is.na(Concentration))\ndata2analyze <- all_result %>>% mutate(testRetest.P = testRetest(., method = \"pearson\"), testRetest.S = testRetest(., method = \"spearman\"))\n\n############################################################################################################\n# Fit the Hill's model on the data of each odor and save the plots\nfit_list <- map2(odorsList, odorkeys, \n                 ~ data2analyze %>>% \n                   filter(Odor %in% c(ctrls, .x)) %>>% \n                   (fit_plot_dr(odorkey = .y, data = ., ctrls = ctrls, conc_Solvent = concSolvent, conc_Air = concAir, \n                                concType = \"molar\", facet_by = NULL, svgs = SVGs)) )\nplot_list <- fit_list %>>% list.map(plot)\n\n############################################################################################################\n# Each data point and the confidence intervals\npdf(paste0(path, \"figure/\", exp_type, \"/Each subject/\", outFileName, \" plot with curve.pdf\"), width = 18, height = 14)\ntemp_plot_list = plot_list %>>% map(~ .x %>>% modifyList(list(layers = list(sampleMean = NULL, ctrlMean = NULL, sampleSE = NULL, ctrlSE = NULL))))\nif (length(plot_list) == 4) {\n  grid.arrange(temp_plot_list[[1]], temp_plot_list[[2]], temp_plot_list[[3]], temp_plot_list[[4]], ncol = 2, nrow = 2)\n}\nif (length(plot_list) == 3) {\n  grid.arrange(temp_plot_list[[1]], temp_plot_list[[2]], temp_plot_list[[3]], ncol = 2, nrow = 2)\n}\nif (length(plot_list) == 2) {\n  grid.arrange(temp_plot_list[[1]], temp_plot_list[[2]], ncol = 2, nrow = 2)\n}\ndev.off()\n\n############################################################################################################\n# Save the data\n# Fitted data\ntest_result <- fit_list %>>% list.map(df) %>>% bind_rows() %>>% (left_join(data2analyze, ., by = \"Odor\")) %>>% rename(OdorKey = InstockKey) %>>% \n  dplyr::select(Block, Subject, Date, Seq, OdorKey, Odor, oID, Concentration, MolarConc, Valve, Solvent, IntensityRating, TrialNo, RovB, testRetest.P, testRetest.S, TovB, pLoF) %>>% \n  arrange(Block, Subject, Valve)\nwrite_csv(test_result, paste0(path, \"data/Processed/\", exp_type, \"/\", outFileName, \".csv\"))\n\n############################################################################################################\n# For diluents\nif (\"Diluents\" %in% data2analyze$Odor) {\n  data2analyze_diluent = data2analyze\n  data2analyze_diluent[data2analyze_diluent$Odor == \"Diluents\", \"Solvent\"] = \"Diluents\"\n  if (block == 24) {\n    data2analyze_diluent[data2analyze_diluent$Solvent == \"Diluents\" & data2analyze_diluent$Valve %in% c(10, 11, 12), \"Odor\"] = \"1,2-Propanediol\"\n    data2analyze_diluent[data2analyze_diluent$Solvent == \"Diluents\" & data2analyze_diluent$Valve %in% c(13, 14, 15), \"Odor\"] = \"Diethyl phthalate\"\n    data2analyze_diluent[data2analyze_diluent$Solvent == \"Diluents\" & data2analyze_diluent$Valve %in% c(16), \"Odor\"] = \"Paraffin oil\"\n    temp_data = data2analyze_diluent %>>% \n      filter(Odor %in% ctrls | Solvent == \"Diluents\") %>>% \n      mutate(Valve = factor(Valve, levels = c(25, 17, 9, 1, 10, 11, 12, 13, 14, 15, 16))) %>>% \n      mutate(Valve = as.numeric(Valve))\n  }\n  if (block == 34) {\n    data2analyze_diluent[data2analyze_diluent$Solvent == \"Diluents\" & data2analyze_diluent$Valve %in% c(26, 27, 28), \"Odor\"] = \"1,2-Propanediol\"\n    data2analyze_diluent[data2analyze_diluent$Solvent == \"Diluents\" & data2analyze_diluent$Valve %in% c(29, 30, 31), \"Odor\"] = \"Diethyl phthalate\"\n    data2analyze_diluent[data2analyze_diluent$Solvent == \"Diluents\" & data2analyze_diluent$Valve %in% c(32), \"Odor\"] = \"Paraffin oil\"\n    temp_data = data2analyze_diluent %>>% \n      filter(Odor %in% ctrls | Solvent == \"Diluents\") %>>% \n      mutate(Valve = factor(Valve, levels = c(25, 17, 9, 1, 26, 27, 28, 29, 30, 31, 32))) %>>% \n      mutate(Valve = as.numeric(Valve))\n  }\n  temp_data_diluent = temp_data %>>% filter(Solvent == \"Diluents\")\n  temp_data_control = temp_data %>>% filter(Solvent != \"Diluents\")\n  plot = ggplot(data = temp_data_diluent, aes(x = Valve, y = IntensityRating)) + \n    geom_point(data = temp_data_control, color = \"black\") +\n    geom_point(data = temp_data_diluent, aes(color = Odor), size = 2) + \n    theme_bw(base_size = 14) + \n    theme(panel.grid.major = element_blank()) + \n    theme(panel.grid.minor = element_blank()) + \n    theme(legend.position = \"none\") + \n    scale_color_hue(drop = FALSE) + \n    scale_fill_hue(drop = FALSE) + \n    ylab(\"Percieved intensity\") + \n    xlab(\"\") + \n    ggtitle(paste0(\"Subject #\", unique(temp_data$Subject), \"; \", unique(temp_data$Date))) + \n    geom_hline(yintercept = 0, linetype = \"dotted\", color = \"grey\") + \n    scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \"Strongest imaginable \\nsensation of any kind\")) + \n    theme(axis.text.x = element_text(angle = 90, vjust = 0.4, hjust = 1))\n  if (block == 24) {\n    plot = plot + scale_x_continuous(limits = c(1, 11), breaks = c(1:11), labels = c(\"Standard (valve 25)\", \"Solvent (valve 17)\", \"Clean air 2 (valve 9)\", \"Clean air 1 (valve 1)\", \"1,2-Propanediol (valve 10)\", \"1,2-Propanediol (valve 11)\", \"1,2-Propanediol (valve 12)\", \"Diethyl phthalate (valve 13)\", \"Diethyl phthalate (valve 14)\", \"Diethyl phthalate (valve 15)\", \"Paraffin oil (valve 16)\"))\n  }\n  if (block == 34) {\n    plot = plot + scale_x_continuous(limits = c(1, 11), breaks = c(1:11), labels = c(\"Standard (valve 25)\", \"Solvent (valve 17)\", \"Clean air 2 (valve 9)\", \"Clean air 1 (valve 1)\", \"1,2-Propanediol (valve 26)\", \"1,2-Propanediol (valve 27)\", \"1,2-Propanediol (valve 28)\", \"Diethyl phthalate (valve 29)\", \"Diethyl phthalate (valve 30)\", \"Diethyl phthalate (valve 31)\", \"Paraffin oil (valve 32)\"))\n  }\n  \n  pdf(paste0(path, \"figure/\", exp_type, \"/Each subject/\", outFileName, \" plots of diluents intensity.pdf\"), width = 10, height = 8)\n  print(plot)\n  dev.off()\n  \n  test_result <- fit_list %>>% list.map(df) %>>% bind_rows() %>>% (left_join(data2analyze_diluent, ., by = \"Odor\")) %>>% rename(OdorKey = InstockKey) %>>% \n    dplyr::select(Block, Subject, Date, Seq, OdorKey, Odor, oID, Concentration, MolarConc, Valve, Solvent, IntensityRating, TrialNo, RovB, testRetest.P, testRetest.S, TovB, pLoF) %>>% \n    arrange(Block, Subject, Valve)\n  write_csv(test_result, paste0(path, \"data/Processed/\", exp_type, \"/\", outFileName, \".csv\"))\n}\n",
    "created" : 1502131166262.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4143163758",
    "id" : "2A186485",
    "lastKnownWriteTime" : 1493732976,
    "path" : "/Volumes/mainland/Projects/Suprathreshold/DataAnalysis/code/Dose Response Analysis Each Subject.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "type" : "r_source"
}