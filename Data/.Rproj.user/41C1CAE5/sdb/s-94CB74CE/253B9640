{
    "contents" : "#working with Yusuke's code to try to get the hill equation model to fit our data. \n########get some code to work with#######\n#Import Libraries\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(pipeR)\n\n#Import Data\nsubj <- dir(path = \"Raw Data/DR_Agitated\", pattern=\"\\\\.txt$\", full.names=TRUE)# creating a list of all file names\nnames(subj)  <- basename(subj)\ndf  <- ldply(subj, read.delim, stringsAsFactors=FALSE) \n#subset variables\ndf <- subset(df, select = c(\"Subject\", \"Trial\", \"valve\", \"valve2\", \"TrainList\", \"Running.Block.\", \"IntensityRating\"))\ndf$IntensityRating.inv <- 580-as.integer(df$IntensityRating)\n\n#Trial Data\ndf.trial <- subset(df, Running.Block. == \"Test\", select = c(\"Subject\", \"Trial\", \"valve\", \"valve2\", \"Running.Block.\", \"IntensityRating.inv\"))\n\n#name the trials based on valves\nvalve.list <- read.csv(\"Analysis/TMA_DR_merge.csv\")\n\n#merge with trial list\ndf.trial_merge <- merge(df.trial, valve.list)\n\n#graph\nggplot(df.trial_merge, aes(x = TMA.Concentration, y = IntensityRating.inv, colour = factor(valve2))) +\n  geom_point() +\n  facet_wrap(~Subject)\n#load packages ##########\nlibrary(\"drc\")\nlibrary(\"sandwich\")\nlibrary(\"lmtest\")\nlibrary(\"multcomp\")\nlibrary(\"readr\")\nlibrary(\"dplyr\")\nlibrary(\"tibble\")\nlibrary(\"tidyr\")\nlibrary(\"purrr\")\nlibrary(\"rlist\")\nlibrary(\"stringr\")\nlibrary(\"pipeR\")\nlibrary(\"rvest\")\nlibrary(\"ggplot2\")\nlibrary(\"gridExtra\")\nlibrary(\"rsvg\")\nlibrary(\"naturalsort\")\n\n######yusuke's code - untouched#####\ntemp_data <- data %>>% filter(Odor %in% c(\"Clean air\", \"Paraffin oil\", odor)) #isolates data from a single odor (from the 4 supra odors tested each week)\ntemp_conc <- temp_data %>>% (.$Concentration) %>>% sort() %>>% unique() #\nmin_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)])\nmax_conc <- max(temp_conc)\nform <- formula(\"IntensityRating ~ Concentration\")\n# Use fixed Top value calculated by the following equation\n# Top = 17.14 * (log10VP[mmHg]+10)^3 / 500 + 14.79\nVP = temp_data %>>% filter(Odor == odor) %>>% (.$VP) %>>% unique()\ntop = 17.14 * VP + 14.79\nmax_int = test %>>% \n  group_by(Concentration) %>>% \n  summarise(mean = mean(IntensityRating), sd = sd(IntensityRating)) %>>% \n  ungroup() %>>% \n  mutate(mean_sd = mean + sd) %>>% \n  arrange(desc(mean)) %>>% \n  (.[1, \"mean_sd\"]) %>>% \n  as.numeric()\ntop_upper = max(top, max_int)\ntemp_fit <- drm(form, \n                data = temp_data, \n                lowerl = c(-4*log(10), 0, 0, min_conc), \n                upperl = c(0, top_upper, top_upper, NA), \n                fct = L.4())\n\n\n###old formula#########\nTMAjars.model <- drm(formula = IntensityRating.inv~TMA.Concentration, \n                     data = subset(df.trial_merge, Subject ==11), \n                     fct = LL.4(fixed = c(1, NA, NA, NA), names = (c(\"Slope\", \"Top\", \"Bottom\", \"ED\"))))\nsummary(TMAjars.model)   \n#Trying to modify ours to fit this...#######\nform = formula(\"IntensityRating ~ Concentration\")\nTMA_fit <- drm(formula = form, \n               data = df.trial_merge, \n               lowerl = c(-4*log(10), 0, 0, min_conc),\n               upperl = c(0,top_upper, top_upper, NA),\n               fct = L.4())\nsummary(TMA_fit)    \nTMAjars.graph = function(x){\n  summary(TMA_fit)$coefficients[2,1] + (summary(TMA_fit)$coefficients[1,1]-summary(TMA_fit)$coefficients[2,1])/(1+10^((log10(summary(TMA_fit)$coefficients[3,1]) - x)*1))\n}\n\nfor (i in unique(df.trial_merge$Subject)){\n  ###modifying what yusuke has########\n  temp_data <- subset(df.trial_merge, Subject == i & TMA.Concentration !=0)\n  temp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #\n  #min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)]) #takes the minimum concentration whichi s not the concentration of solvent or air\n  min_conc <- min(temp_conc[temp_conc != 0])\n  max_conc <- max(temp_conc)\n  form <- formula(\"IntensityRating.inv ~ TMA.Concentration\")\n  \n    # Use fixed Top value calculated by the following equation  --- MK: I'm interested where this equation comes from - it takes into account VP and somehow also the top of the scale\n    # Top = 17.14 * (log10VP[mmHg]+10)^3 / 500 + 14.79\n    #VP = temp_data %>>% filter(Odor == odor) %>>% (.$VP) %>>% unique() #sets VP for odor based on the dataframe\n    #I'm going to look up VP for TMA\n    #VP for TMA = 1487.83 mm Hg --- do I need to take the log 10 of it and then raise it to the third????\n     VP = 1487.83\n     VP2 = ((log10(VP)+ 10)^3) /500\n     top = 17.14 * VP2 + 14.79\n    #top = 500\n    #he had test= data without controls included\n    max_int = df.trial_merge %>>% \n      group_by(TMA.Concentration) %>>% \n      summarise(mean = mean(IntensityRating.inv), sd = sd(IntensityRating.inv)) %>>% \n      ungroup() %>>% \n      mutate(mean_sd = mean + sd) %>>% \n      arrange(desc(mean)) %>>% \n      (.[1, \"mean_sd\"]) %>>% \n      as.numeric()\n  top_upper = max(top, max_int) #I'm not sure how to do this for fitting with multiple people, for now I'm just going to set the top to 500\n  top_upper = 500\n  temp_fit <- drm(form, \n                  data = temp_data, \n                  lowerl = c(-4*log(10), 0, 0, min_conc), \n                  upperl = c(0, top_upper, top_upper, NA), \n                  fct = LL.4())\n  #using LL.4 instead of L.4 becuase the function actually seems to fit here!\n  \n  summary(temp_fit)\n  #based on old data\n  TMAjars.graph = function(x){\n    summary(temp_fit)$coefficients[3,1] + (summary(temp_fit)$coefficients[2,1]-summary(temp_fit)$coefficients[3,1])/(1+10^((log10(summary(temp_fit)$coefficients[4,1]) - x)*summary(temp_fit)$coefficients[1,1]))\n  } #This also had to be modified to include the slope command since its no longer fixed to 1, and all of the indexing also had to be modified\n  \n  temp_data$logConcentration <- log10(temp_data$TMA.Concentration)\n print(ggplot(temp_data, aes(x = logConcentration, y = IntensityRating.inv)) +\n    geom_point() +\n    stat_function(fun = TMAjars.graph) +\n    ggtitle(paste(\"Subject # \", i))\n )\n}\n\n#This works! Now we just need to figure out how to do it for multiple subjects \n######Multiple Subjects###\ndf.scale <- ddply(.data = df.trial_merge, .variables = c(\"Subject\"), .fun = mutate, normIntensity = scale(IntensityRating.inv))\n\nggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +\n  geom_point() +\n  facet_wrap(~Subject)\n\nggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +\n  geom_point()\n##Trying to fit multiple people now that the graph is normalized\ntemp_data <- subset(df.scale, TMA.Concentration !=0)\ntemp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #\n#min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)]) #takes the minimum concentration whichi s not the concentration of solvent or air\nmin_conc <- min(temp_conc[temp_conc != 0])\nmax_conc <- max(temp_conc)\nform <- formula(\"normIntensity ~ TMA.Concentration\")\n\n# # Use fixed Top value calculated by the following equation  --- MK: I'm interested where this equation comes from - it takes into account VP and somehow also the top of the scale\n# # Top = 17.14 * (log10VP[mmHg]+10)^3 / 500 + 14.79\n# #VP = temp_data %>>% filter(Odor == odor) %>>% (.$VP) %>>% unique() #sets VP for odor based on the dataframe\n# #I'm going to look up VP for TMA\n# #VP for TMA = 1487.83 mm Hg --- do I need to take the log 10 of it and then raise it to the third????\n# VP = 1487.83\n# VP2 = ((log10(VP)+ 10)^3) /500\n# top = 17.14 * VP2 + 14.79\n# #top = 500\n#he had test= data without controls included\nmax_int = df.trial_merge %>>% \n  group_by(TMA.Concentration) %>>% \n  summarise(mean = mean(IntensityRating.inv), sd = sd(IntensityRating.inv)) %>>% \n  ungroup() %>>% \n  mutate(mean_sd = mean + sd) %>>% \n  arrange(desc(mean)) %>>% \n  (.[1, \"mean_sd\"]) %>>% \n  as.numeric()\n#top_upper = max(top, max_int) #I'm not sure how to do this for fitting with multiple people, for now I'm just going to set the top to 500\ntop_upper = 5\ntemp_fit <- drm(form, \n                data = temp_data, \n                lowerl = c(-4*log(10), -2, -2, min_conc), #had to change the limits for the normalization process.\n                upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero? \n                fct = LL.4())\n#using LL.4 instead of L.4 becuase the function actually seems to fit here!\n\nsummary(temp_fit)\n#based on old data\nTMAjars.graph = function(x){\n  summary(temp_fit)$coefficients[3,1] + (summary(temp_fit)$coefficients[2,1]-summary(temp_fit)$coefficients[3,1])/(1+10^((log10(summary(temp_fit)$coefficients[4,1]) - x)*summary(temp_fit)$coefficients[1,1]))\n}  \ndf.scale$Concentration <- log10(df.scale$TMA.Concentration)\nggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +\n  geom_point() +\n  geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +\n  geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1)\n\nggplot(new_data_for_plot, aes(x = Concentration, y = Prediction))+\n  geom_line() +\n  geom_ribbon(data = new_data_for_plot, aes(ymin = Lower, ymax = Upper), alpha = 0.1)\n\n\n#we will have to test this to see if the people who have really bad test-retest improve this graph\nconc_Air = 0\nnew_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))\n# predictions and confidence intervals\npm <- predict(temp_fit, newdata = new_data_for_plot, interval = \"confidence\") %>>% data.frame()\nnew_data_for_plot <- bind_cols(new_data_for_plot, pm) \n#Also trying to get 95% confidence interval \nplot <- plot + \n  geom_line(data = new_data_for_plot) + \n  geom_ribbon(data = new_data_for_plot, aes(ymin = Lower, ymax = Upper, fill = Seq), alpha = 0.1)\n\n\n## Comparing the dese-response model to a model where the response is on average constant and hence not changing with dose.\ndoseReponse <- as.numeric(noEffect(temp_fit)[\"p-value\"]) < 0.05\n## Top is higher than bottom?\nnew_data <- expand.grid(Concentration = seq(conc_Air, max_conc, length.out = 1000)) # range of concentrations\npred <- predict(temp_fit, newdata = new_data, interval = \"confidence\") %>>% data.frame()\nTovB <- (max(pred$Lower, na.rm = TRUE) > min(pred$Upper, na.rm = TRUE) & doseReponse)\n## Lack-of-fit test\npLoF <- modelFit(temp_fit) %>>% (.$`p value`[2])\n## Mean absolute percent error\nMAPE <- mape(temp_fit)\n\n\n#working on final graph\nsummary_test <- df.scale %>>% \n  group_by(TMA.Concentration) %>>% \n  summarise(Intensity = mean(normIntensity), se = sd(normIntensity)/sqrt(length(normIntensity))) %>>% \n  ungroup()\n\ngeom_errorbar(data = summary_test, aes(ymin = Intensity - se, ymax = Intensity + se), width = 0.1) + # error bars of samples\n  \n\nggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +\n  geom_point() +\n  geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +\n  geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +\n  geom_errorbar(data = summary_test, aes(x = Concentration, y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples\n\n\n\n#####Do the whole thing without normalizing the data#######\ntemp_data <- subset(df.scale, TMA.Concentration !=0 & !Subject %in% c(14, 16, 18, 36))\n\ntemp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #\n#min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)]) #takes the minimum concentration whichi s not the concentration of solvent or air\nmin_conc <- min(temp_conc[temp_conc != 0])\nmax_conc <- max(temp_conc)\nform <- formula(\"IntensityRating.inv ~ TMA.Concentration\")\n\n# max_int = df.scale %>>% \n#   group_by(TMA.Concentration) %>>% \n#   summarise(mean = mean(normIntensity), sd = sd(normIntensity)) %>>% \n#   ungroup() %>>% \n#   mutate(mean_sd = mean + sd) %>>% \n#   arrange(desc(mean)) %>>% \n#   (.[1, \"mean_sd\"]) %>>% \n#   as.numeric()\n#top_upper = max(top, max_int) #I'm not sure how to do this for fitting with multiple people, for now I'm just going to set the top to 500\ntop_upper = 500\ntemp_fit <- drm(form, \n                data = temp_data, \n                lowerl = c(-4*log(10), 0, 0, min_conc), #had to change the limits for the normalization process.\n                upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero? \n                fct = LL.4())\n#using LL.4 instead of L.4 becuase the function actually seems to fit here! - not sure the difference, maybe in inputting logarhythms or something\nsummary(temp_fit)\n\n#make prediction dataframe\nconc_Air = 0\nnew_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))\n# predictions and confidence intervals\npm <- predict(temp_fit, newdata = new_data_for_plot, interval = \"confidence\") %>>% data.frame()\nnew_data_for_plot <- bind_cols(new_data_for_plot, pm) \n#find mean and SEM\n\n\nsummary_test <- df.scale %>>% \n  group_by(TMA.Concentration) %>>% \n  summarise(Intensity = mean(IntensityRating.inv), se = sd(IntensityRating.inv)/sqrt(length(IntensityRating.inv))) %>>% \n  ungroup()\n\n#plot\npng(\"Analysis/Figures/Experiment3_rawData_curve_withScale.png\")\nggplot(df.scale, aes(x = TMA.Concentration)) +\n  #geom_point() +\n  geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +\n  geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +\n  geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) + # error bars of samples\n  #scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \"Strongest imaginable \\nsensation of any kind\")) + \n  scale_y_continuous(limits = c(0, 500), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5, 100*5), labels = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \"Strongest imaginable \\nsensation of any kind\")) + #yusuke's line *5 +\n  scale_x_log10()\ndev.off()\n#with the scale continuous, it does not look very good, but looks better at the y; would need to fix the clean, 0,  values to make this graph work\n\npng(\"Analysis/Figures/Experiment3_rawData_curve.png\")\nggplot(df.scale, aes(x = TMA.Concentration)) +\n  #geom_point() +\n  geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +\n  geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +\n  geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) #+ # error bars of samples\n#   #scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \"Strongest imaginable \\nsensation of any kind\")) + \n#   scale_y_continuous(limits = c(0, 500), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5, 100*5), labels = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \"Strongest imaginable \\nsensation of any kind\")) + #yusuke's line *5 +\n#   scale_x_log10()\ndev.off()\n\n\n\n####Do it with normalized data and removing the subjects who are shitty at the task\n#####Do the whole thing without normalizing the data#######\ntemp_data <- subset(df.scale, TMA.Concentration !=0)\ntemp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #\n#min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)]) #takes the minimum concentration whichi s not the concentration of solvent or air\nmin_conc <- min(temp_conc[temp_conc != 0])\nmax_conc <- max(temp_conc)\nform <- formula(\"normIntensity ~ TMA.Concentration\")\n  \n\n\n#top_upper = max(top, max_int) #I'm not sure how to do this for fitting with multiple people, for now I'm just going to set the top to 500\ntop_upper = 5\ntemp_fit <- drm(form, \n                data = temp_data, \n                lowerl = c(-4*log(10), -5, -5, min_conc), #had to change the limits for the normalization process.\n                upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero? \n                fct = LL.4())\n#using LL.4 instead of L.4 becuase the function actually seems to fit here! - not sure the difference, maybe in inputting logarhythms or something\nsummary(temp_fit)\n\n#make prediction dataframe\nconc_Air = 0\nnew_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))\n# predictions and confidence intervals\npm <- predict(temp_fit, newdata = new_data_for_plot, interval = \"confidence\") %>>% data.frame()\nnew_data_for_plot <- bind_cols(new_data_for_plot, pm) \n\n#find mean and SEM\nsummary_test <- df.scale %>>% \n  group_by(TMA.Concentration) %>>% \n  summarise(Intensity = mean(normIntensity), se = sd(normIntensity)/sqrt(length(normIntensity))) %>>% \n  ungroup()\n\nsummary_test <- ddply(df.scale, .variables = c(\"TMA.Concentration\"), .fun = summarize, Intensity = mean(normIntensity), se = sd(normIntensity)/sqrt(length(normIntensity)))\n\n#plot\npng(\"Analysis/Figures/Experiment3_normalized_curve.png\")\nggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +\n  #geom_point() +\n  geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +\n  geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +\n  geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples\ndev.off()\n",
    "created" : 1502118782727.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "74|14|78|25|\n79|37|89|1|\n",
    "hash" : "2147985199",
    "id" : "253B9640",
    "lastKnownWriteTime" : 1502207653,
    "path" : "/Volumes/mainland/Projects/TMA blocker/SupraStyle/Data/Analysis/Supra_fromYusuke.R",
    "project_path" : "Analysis/Supra_fromYusuke.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}