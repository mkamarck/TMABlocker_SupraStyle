{
    "contents" : "rm(list = ls())\n# Packages\nloadPackages <- function(package) {\n  package <- as.character(package)\n  if (require(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {\n    cat(sprintf(\"%s is loaded correctly\\n\", package))\n  } else {\n    cat(sprintf(\"trying to install %s...\\n\", package))\n    install.packages(package)\n    stopifnot(require(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE))\n    cat(sprintf(\"could not install %s\\n\", package))\n  }\n}\nloadPackages(\"drc\")\nloadPackages(\"sandwich\")\nloadPackages(\"lmtest\")\nloadPackages(\"multcomp\")\nloadPackages(\"readr\")\nloadPackages(\"dplyr\")\nloadPackages(\"tibble\")\nloadPackages(\"tidyr\")\nloadPackages(\"purrr\")\nloadPackages(\"rlist\")\nloadPackages(\"stringr\")\nloadPackages(\"pipeR\")\nloadPackages(\"rvest\")\nloadPackages(\"ggplot2\")\nloadPackages(\"gridExtra\")\nloadPackages(\"rsvg\")\nloadPackages(\"naturalsort\")\n\n# Path\npath <- getwd() %>>% str_split(\"code\") %>>% (.[[1]][1])\nSVGs <- path %>>% paste0(\"figure/structures\") %>>% list.files(full.names = T)\nepisuite <- readRDS(paste0(path, \"data/episuite without NA mols DREAM and Supra.rds\")) %>>% \n  dplyr::select(oID, VP) %>>% mutate(VP = (VP + 10)^3 / 500)\n# Functions\nsource(paste0(path, \"code/dr function.R\"))\n\n# Subject and experiment information\n##### Fill ME #####\nblock = 24            # fill the block number\nctrls = c(\"Clean air\", \"Clean air\", \"Paraffin oil\", \"1% Linalool\")\nbase = \"Paraffin oil\" # Include solvent or clean air in the fitting data\nconcSolvent = 1e-12   # Hyperparameters for fitting\nconcAir = 1e-20       # Hyperparameters for fitting\nfixedTop = FALSE\nvp = episuite\n###################\n\n# Block5 day1, block7 day1, block18 day3-5, block21 subject 12\nirregular1 = c(\"-18-5.txt\", \"-4-5.txt\", \"-52-5.txt\", \n               \"-12-7.txt\", \"-4-7.txt\", \"-52-7.txt\", \"-24-7.txt\",\n               \"-19-18.txt\", \"-13-18.txt\", \"-56-18.txt\", \"-26-18.txt\", \"-17-18.txt\", \"-46-18.txt\", \"-7-18.txt\", \"-37-18.txt\", \"-30-18.txt\", \n               \"-12-21.txt\", \n               \"-4-26.txt\", \"-12-26.txt\", \"-37-26.txt\", \"-52-26.txt\", \"-63-26.txt\", \"-73-26.txt\", \n               \"-95-24.txt\", \"-912-24.txt\", \"-913-24.txt\", \"-930-24.txt\", \"-937-24.txt\", \"-952-24.txt\", \"-953-24.txt\", \"-962-24.txt\", \"-973-24.txt\", \"-975-24.txt\", \"-977-24.txt\", \"-981-24.txt\", \"-983-24.txt\", \"-985-24.txt\", \"-988-24.txt\", \"-990-24.txt\")\n# Block5 day2 morning or block7 day2 and day3 morning\nirregular2 = c(\"-21-5.txt\", \"-3-5.txt\", \"-5-5.txt\", \n               \"-21-7.txt\", \"-35-7.txt\", \"-5-7.txt\", \"-13-7.txt\", \"-20-7.txt\", \"-19-7.txt\")\n\n# Directory and names of input and output files.\n############################################################################################################\nexp_type <- make2digitsNames(block)\nmyFileName <- list.files(path = paste0(path, \"data/Processed/\", exp_type, \"/\"))\nmyFileName_train <- myFileName %>>% (.[str_detect(., \"scale use training\")])\nmyFileName_test  <- myFileName %>>% (.[!str_detect(., \"scale use training\")]) %>>% \n  (. [!. %in% c(\"Supra with games new-53-131.txt\", \"Supra with games new-53-132.txt\")])\nsubject_train <- myFileName_train %>>% str_extract(\"-\\\\d+-\") %>>% str_replace_all(\"-\", \"\") %>>% unique()\nsubject_test  <- myFileName_test %>>% str_extract(\"-\\\\d+-\")  %>>% str_replace_all(\"-\", \"\") %>>% unique()\n\n############################################################################################################\n\n# Evaluation of participant's use of the gLMS\n############################################################################################################\nif (!fixedTop) {\n  Questions <- c(\"Loudness of a whisper\", \"Loudness of a conversation\", \"Loudest sound you have ever heard\", \n                 \"Brightness of a dimly lit room\", \"Brightness of a well-lit room\", \"Brightest light you have ever seen\", \n                 \"Warmth of a summer breeze on your face\", \"Heat from dipping your hand in scalding hot water\", \n                 \"Strength of a firm handshake\", \"Pain of bitting your tongue\", \n                 \"Sweetness of cotton candy\", \"Bitter taste of black coffee\", \"Sourness of a lemon\", \n                 \"Coolness from a peppermint candy\", \"Burn from cinnamon gum\")\n  ScaleTraining_result <- myFileName_train %>>%\n    map_df(~ read_csv(paste0(path, \"data/Processed/\", exp_type, \"/\", .x), col_types = \"ddccddc\")) %>>%\n    mutate(Question = factor(Question, levels = Questions)) %>>%\n    arrange(Block, Subject, Question)\n  train.fig.name = paste0(path, \"figure/\", exp_type, \"/All subjects sacle use training \", exp_type, \".pdf\")\n  pdf(train.fig.name, width = 11, height = 8)\n  do_quietly <- ScaleTraining_result %>>% \n    plot_scale_training(subject = paste0(n_distinct(.$Subject), \" subjects\"), \n                        type = \"point\", annotation = F, alpha = 0.6, print_plot = T)\n  dev.off()\n}\n############################################################################################################\n\n# Odor information\n############################################################################################################\nodor_info <- read_csv(paste0(path, \"data/OdorInfo/\", exp_type, \".csv\"), col_types = \"ddccddddddddcdcd\") %>>% \n  gather(key = Level, value = Concentration, A:G) %>>% \n  arrange(Seq, Level) %>>% \n  mutate(Valve = c(rev(2:8), rev(10:16), rev(18:24), rev(26:32)))\n# Read test results of all subjects\nall_result <- myFileName_test %>>% \n  map_df(~ read_csv(paste0(path, \"data/Processed/\", exp_type, \"/\", .x), col_types = \"ddcddcddddcddlddld\"))\ndata2analyze <- all_result %>>% \n  dplyr::select(-TovB, -pLoF) %>>% \n  rename(InstockKey = OdorKey) %>>% \n  mutate(Seq = factor(Seq)) %>>% \n  filter(testRetest.P >= 0.3 & testRetest.S >= 0.3)\nvp = vp[c(\"oID\", \"VP\")]\ndata2analyze = data2analyze %>>% left_join(vp, by = \"oID\")\n\nodorsList <- data2analyze %>>% filter(Solvent != \"Diluents\") %>>% filter(!Odor %in% ctrls) %>>% (.$Odor) %>>% unique() %>>% (.[. != \"Diluents\"])\nodorkeys  <- data2analyze %>>% filter(Solvent != \"Diluents\") %>>% filter(!Odor %in% ctrls) %>>% (.$InstockKey) %>>% unique() %>>%  (.[!is.na(.)])\n############################################################################################################\n\n# Fit the Hill's model on the data of each odor and save the plots\n############################################################################################################\nfit_list <- map2(odorsList, odorkeys, \n                 ~ data2analyze %>>% \n                   filter(Odor %in% c(ctrls, .x)) %>>% \n                   (do.call(what = ifelse(fixedTop, \"fit_plot_dr_fixedTop\", \"fit_plot_dr\"), \n                            args = list(odorkey = .y, data = ., ctrls = ctrls, conc_Solvent = concSolvent, conc_Air = concAir, \n                                        concType = \"molar\", facet_by = NULL, svgs = SVGs))\n                   )\n)\nplot_list <- fit_list %>>% list.map(plot)\n############################################################################################################\n\n# Save plots\n############################################################################################################\n## Each data point and the confidence intervals\nfig.name = paste0(path, \"figure/\", exp_type, ifelse(fixedTop, \"/With upper limit \", \"/\"))\npdf(paste0(fig.name, \"All subjects plot with curve \", exp_type, \".pdf\"), width = 18, height = 14)\ntemp_plot_list = plot_list %>>% \n  map(~ .x %>>% modifyList(list(layers = list(sampleMean = NULL, ctrlMean = NULL, sampleSE = NULL, ctrlSE = NULL))))\nif (length(plot_list) == 4) {\n  grid.arrange(temp_plot_list[[1]], temp_plot_list[[2]], temp_plot_list[[3]], temp_plot_list[[4]], ncol = 2, nrow = 2)\n}\nif (length(plot_list) == 3) {\n  grid.arrange(temp_plot_list[[1]], temp_plot_list[[2]], temp_plot_list[[3]], ncol = 2, nrow = 2)\n}\nif (length(plot_list) == 2) {\n  grid.arrange(temp_plot_list[[1]], temp_plot_list[[2]], ncol = 2, nrow = 2)\n}\ndev.off()\n\n# Curves and error bars\npdf(paste0(fig.name, \"All subjects plot with curve SEM \", exp_type, \".pdf\"), width = 18, height = 14)\ntemp_plot_list = plot_list %>>% \n  map(~ .x %>>% modifyList(list(layers = list(samples = NULL, ctrls = NULL))))\nif (length(plot_list) == 4) {\n  grid.arrange(temp_plot_list[[1]], temp_plot_list[[2]], temp_plot_list[[3]], temp_plot_list[[4]], ncol = 2, nrow = 2)\n}\nif (length(plot_list) == 3) {\n  grid.arrange(temp_plot_list[[1]], temp_plot_list[[2]], temp_plot_list[[3]], ncol = 2, nrow = 2)\n}\nif (length(plot_list) == 2) {\n  grid.arrange(temp_plot_list[[1]], temp_plot_list[[2]], ncol = 2, nrow = 2)\n}\ndev.off()\n############################################################################################################\n\n# Save the fitted data\n############################################################################################################\nhill_result <- fit_list %>>% \n  list.map(df) %>>% \n  bind_rows() %>>% \n  mutate(concSolvent = concSolvent)\nsummary <- odor_info %>>% \n  mutate(Block = block) %>>% \n  dplyr::select(Block, Seq, oID:Solvent) %>>% \n  unique() %>>% \n  left_join(hill_result, by = \"Odor\")\nsummary.name = paste0(path, \"data/Processed/\", ifelse(fixedTop, \"With upper limit \", \"\"))\nwrite_csv(summary, paste0(summary.name, \"Summary Fit_\", exp_type, \".csv\"))\n############################################################################################################\n\n# For diluents\n############################################################################################################\nif (\"Diluents\" %in% data2analyze$Solvent) {\n  data2analyze_diluent = data2analyze\n  temp_data = data2analyze_diluent %>>% \n    filter(Odor %in% ctrls | Solvent == \"Diluents\") %>>% \n    mutate(Valve = factor(Valve, levels = c(25, 17, 9, 1, 10, 11, 12, 13, 14, 15, 16))) %>>% \n    mutate(Valve = as.numeric(Valve))\n  temp_data_diluent = temp_data %>>% filter(Solvent == \"Diluents\")\n  temp_data_control = temp_data %>>% filter(Solvent != \"Diluents\")\n  summary_diluent = temp_data_diluent %>>% \n    group_by(Odor, Valve) %>>% \n    summarise(Intensity = mean(IntensityRating), se = se(IntensityRating)) %>>% \n    ungroup()\n  summary_control = temp_data_control %>>% \n    group_by(Odor, Valve) %>>% \n    summarise(Intensity = mean(IntensityRating), se = se(IntensityRating)) %>>% \n    ungroup()\n  \n  plot = ggplot(data = summary_diluent, aes(x = Valve, y = Intensity)) + \n    geom_point(data = summary_control, color = \"black\") +\n    geom_point(data = summary_diluent, aes(color = Odor), size = 2) + \n    geom_errorbar(data = summary_control, aes(ymin = Intensity - se, ymax = Intensity + se), color = \"black\", width = 0.1) + \n    geom_errorbar(data = summary_diluent, aes(ymin = Intensity - se, ymax = Intensity + se, color = Odor), width = 0.1) + \n    theme_bw(base_size = 14) + \n    theme(panel.grid.major = element_blank()) + \n    theme(panel.grid.minor = element_blank()) + \n    theme(legend.position = \"none\") + \n    scale_color_hue(drop = FALSE) + \n    scale_fill_hue(drop = FALSE) + \n    ylab(\"Percieved intensity\") + \n    xlab(\"\") + \n    ggtitle(paste0(length(subject_test), \" subjects\")) + \n    geom_hline(yintercept = 0, linetype = \"dotted\", color = \"grey\") + \n    scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c(\"\", \"Barely detectable\", \"Weak\", \"Moderate\", \"Strong\", \"Very strong\", \"Strongest imaginable \\nsensation of any kind\")) + \n    scale_x_continuous(limits = c(1, 11), breaks = c(1:11), labels = c(\"Standard (valve 25)\", \"Solvent (valve 17)\", \"Clean air 2 (valve 9)\", \"Clean air 1 (valve 1)\", \"1,2-Propanediol (valve 10)\", \"1,2-Propanediol (valve 11)\", \"1,2-Propanediol (valve 12)\", \"Diethyl phthalate (valve 13)\", \"Diethyl phthalate (valve 14)\", \"Diethyl phthalate (valve 15)\", \"Paraffin oil (valve 16)\")) + \n    theme(axis.text.x = element_text(angle = 90, vjust = 0.4, hjust = 1))\n  \n  pdf(paste0(path, \"figure/\", exp_type, \"/plots of diluents intensity.pdf\"), width = 10, height = 8)\n  print(plot)\n  dev.off()\n}\n############################################################################################################\n",
    "created" : 1502131207498.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "300163613",
    "id" : "26A3EC09",
    "lastKnownWriteTime" : 1493669860,
    "path" : "/Volumes/mainland/Projects/Suprathreshold/DataAnalysis/code/Dose Response Analysis Summarise All Subjects.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "type" : "r_source"
}