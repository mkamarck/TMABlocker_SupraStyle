facet_wrap(~Subject)
HillEquationFit3 <- function(temp_data, form, normalized = FALSE){
temp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #
min_conc <- min(temp_conc[temp_conc != 0])
max_conc <- max(temp_conc)
if(!normalized){
top_upper = 500
low_bottom = 0
}
else{
top_upper = 10
low_bottom = -5
}
temp_fit <- drm(form,
data = temp_data,
lowerl = c(-4*log(10), low_bottom, low_bottom, min_conc), #had to change the limits for the normalization process.
upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero?
fct = LL.4())
#using LL.4 instead of L.4 becuase the function actually seems to fit here! - not sure the difference, maybe in inputting logarhythms or something
print(summary(temp_fit))
#make prediction dataframe
new_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))
# predictions and confidence intervals
pm <- predict(temp_fit, newdata = new_data_for_plot, interval = "confidence") %>>% data.frame()
##new_data_for_plot <- bind_cols(new_data_for_plot, pm)
new_data_for_plot <- cbind(new_data_for_plot, pm)
#find mean and SEM
return(new_data_for_plot)
}
#######################
temp_data <- subset(df.trial_merge, TMA.Concentration !=0 & Subject !=1000)
form <- formula("IntensityRating.inv ~ TMA.Concentration")
new_data_for_plot <- HillEquationFit3(temp_data, form, normalized = FALSE)
print(ggplot(temp_data, aes(x = TMA.Concentration, y = IntensityRating.inv)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
ggtitle(paste("Test Graph for Type TMA"))
)
#get mean and SEM
summary_test <- ddply(temp_data, .variables = c("TMA.Concentration"), .fun = summarize, Intensity = mean(IntensityRating.inv), se = sd(IntensityRating.inv)/sqrt(length(IntensityRating.inv)))
summary_test$Concentration <- log10(summary_test$TMA.Concentration)
#plot
#png("Analysis/Figures/Experiment3_rawData_TMA.png", width = 600, height =960)
ggplot(summary_test, aes(x = TMA.Concentration, y = Intensity)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) + # error bars of samples
#scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong", "Strongest imaginable \nsensation of any kind")) +
scale_y_continuous(limits = c(0, 53.3*5), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong")) +#yusuke's line *5 +
ggtitle("Experiment 3") +
theme_bw() +
theme(text= element_text(size = 30))
HillEquationFit3 <- function(temp_data, form, normalized = FALSE){
temp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #
min_conc <- min(temp_conc[temp_conc != 0])
max_conc <- max(temp_conc)
if(!normalized){
top_upper = 500
low_bottom = 0
}
else{
top_upper = 10
low_bottom = -5
}
temp_fit <- drm(form,
data = temp_data,
lowerl = c(-4*log(10), low_bottom, low_bottom, min_conc), #had to change the limits for the normalization process.
upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero?
fct = LL.4())
#using LL.4 instead of L.4 becuase the function actually seems to fit here! - not sure the difference, maybe in inputting logarhythms or something
#print(summary(temp_fit))
#make prediction dataframe
new_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))
# predictions and confidence intervals
pm <- predict(temp_fit, newdata = new_data_for_plot, interval = "confidence") %>>% data.frame()
##new_data_for_plot <- bind_cols(new_data_for_plot, pm)
new_data_for_plot <- cbind(new_data_for_plot, pm)
#find mean and SEM
return(new_data_for_plot)
}
ggplot(summary_test, aes(x = TMA.Concentration, y = Intensity)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) + # error bars of samples
#scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong", "Strongest imaginable \nsensation of any kind")) +
scale_y_continuous(limits = c(0, 53.3*5), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong")) +#yusuke's line *5 +
ggtitle("Experiment 3 TMA Concentration") +
theme_bw() +
xlab("TMA Concentration (mM)") +
ylab("Intensity Ratings")
temp_data <- subset(df.trial_merge, Concentration !=0 & !Subject %in% c(14, 16, 18, 36) & Type == "TMA")
form <- formula("normIntensity ~ Concentration")
new_data_for_plot <- HillEquationFit(temp_data, form, normalized = FALSE)
#summarize data
summary_test <- ddply(temp_data, .variables = c("Concentration"), .fun = summarize, Intensity = mean(normIntensity), se = sd(normIntensity)/sqrt(length(normIntensity)))
temp_data <- subset(df.trial_merge, Concentration !=0 & !Subject %in% c(14, 16, 18, 36) & Type == "TMA")
#Import Data
subj <- dir(path = "/Volumes/mainland/Projects/TMA\ blocker/SupraStyle/Data/Raw\ Data/Test1_olfactometer", pattern="\\.txt$", full.names=TRUE)# on mac - creating a list of all file names
names(subj)  <- basename(subj)
df  <- ldply(subj, read.delim, stringsAsFactors=FALSE)
#subset variables
df <- subset(df, select = c("Subject", "Trial", "valve", "valve2", "TrainList", "Running.Block.", "IntensityRating"))
df$IntensityRating.inv <- 580-as.integer(df$IntensityRating)
#Trial Data
df.trial <- subset(df, Running.Block. == "Test", select = c("Subject", "Trial", "valve", "valve2", "Running.Block.", "IntensityRating.inv"))
#import the file that has the trial types
valve.list <- read.csv("/Volumes/mainland/Projects/TMA blocker/SupraStyle/Data/Analysis/TMA_supra_highTMA_merge.csv") #for a mac
#merge with trial list
df.trial_merge <- merge(df.trial, valve.list)
#Make all the blanks the same type
df.trial_merge$Type_new <- as.factor(df.trial_merge$Type)
for (i in 1:length(df.trial_merge$Type)){
if(df.trial_merge$Type[i] %in% c("Blank 1", "Blank 2", "blank combo", "Blank combo")){
df.trial_merge$Type_new[i] <- "Blank 1"
}
}
temp_data <- subset(df.trial_merge, Concentration !=0 & !Subject %in% c(14, 16, 18, 36) & Type == "TMA")
form <- formula("normIntensity ~ Concentration")
new_data_for_plot <- HillEquationFit(temp_data, form, normalized = FALSE)
form <- formula("IntensityRating.inv ~ Concentration")
new_data_for_plot <- HillEquationFit(temp_data, form, normalized = FALSE)
summary_test <- ddply(temp_data, .variables = c("Concentration"), .fun = summarize, Intensity = mean(IntensityRating.inv), se = sd(IntensityRating.inv)/sqrt(length(IntensityRating.inv)))
ggplot(summary_test, aes(x = Concentration, y = Intensity)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) +
ggtitle(paste("Type = ", i))  +
ylim(-1.5, 2.5) +
theme(legend.position = "none")
temp_data <- subset(df.trial_merge, Concentration !=0 & !Subject %in% c(14, 16, 18, 36) & Type == "TMA")
form <- formula("IntensityRating.inv ~ Concentration")
new_data_for_plot <- HillEquationFit(temp_data, form, normalized = FALSE)
#summarize data
summary_test <- ddply(temp_data, .variables = c("Concentration"), .fun = summarize, Intensity = mean(IntensityRating.inv), se = sd(IntensityRating.inv)/sqrt(length(IntensityRating.inv)))
#plot - save
ggplot(summary_test, aes(x = Concentration, y = Intensity)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) +
ggtitle(paste("Type = "))  +
ylim(-1.5, 2.5) +
theme(legend.position = "none")
ggplot(summary_test, aes(x = Concentration, y = Intensity)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) + # error bars of samples
#scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong", "Strongest imaginable \nsensation of any kind")) +
scale_y_continuous(limits = c(0, 53.3*5), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong")) +#yusuke's line *5 +
ggtitle("Experiment 1") +
theme_bw() +
theme(text= element_text(size = 30))
plot.experiment1 <- ggplot(summary_test, aes(x = Concentration, y = Intensity)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) + # error bars of samples
#scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong", "Strongest imaginable \nsensation of any kind")) +
scale_y_continuous(limits = c(0, 53.3*5), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong")) +#yusuke's line *5 +
ggtitle("Experiment 1 TMA DR") +
theme_bw()
subj <- dir(path = "/Volumes/mainland/Projects/TMA\ blocker/SupraStyle/Data/Raw Data/DR_Agitated", pattern="\\.txt$", full.names=TRUE)# creating a list of all file names
names(subj)  <- basename(subj)
df  <- ldply(subj, read.delim, stringsAsFactors=FALSE)
#subset variables
df <- subset(df, select = c("Subject", "Trial", "valve", "valve2", "TrainList", "Running.Block.", "IntensityRating"))
df$IntensityRating.inv <- 580-as.integer(df$IntensityRating)
#Trial Data
df.trial <- subset(df, Running.Block. == "Test", select = c("Subject", "Trial", "valve", "valve2", "Running.Block.", "IntensityRating.inv"))
#name the trials based on valves
valve.list <- read.csv("Analysis/TMA_DR_merge.csv")
#merge with trial list
df.trial_merge <- merge(df.trial, valve.list)
#put subjects in order
df.trial_merge$Subject <- factor(df.trial_merge$Subject, levels = c(11, 50, 29, 33, 56, 49, 59, 58, 62, 54, 53))
#graph
ggplot(subset(df.trial_merge, Subject !=1000), aes(x = TMA.Concentration, y = IntensityRating.inv, colour = factor(valve2))) +
geom_point() +
facet_wrap(~Subject)
################################################################
#Fit curves to RAW TMA data - EXPERIMENT 3 ONLY
#different function for experiment 3 becuase TMA concentration is labeled differently
################################################################
HillEquationFit3 <- function(temp_data, form, normalized = FALSE){
temp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #
min_conc <- min(temp_conc[temp_conc != 0])
max_conc <- max(temp_conc)
if(!normalized){
top_upper = 500
low_bottom = 0
}
else{
top_upper = 10
low_bottom = -5
}
temp_fit <- drm(form,
data = temp_data,
lowerl = c(-4*log(10), low_bottom, low_bottom, min_conc), #had to change the limits for the normalization process.
upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero?
fct = LL.4())
#using LL.4 instead of L.4 becuase the function actually seems to fit here! - not sure the difference, maybe in inputting logarhythms or something
#print(summary(temp_fit))
#make prediction dataframe
new_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))
# predictions and confidence intervals
pm <- predict(temp_fit, newdata = new_data_for_plot, interval = "confidence") %>>% data.frame()
##new_data_for_plot <- bind_cols(new_data_for_plot, pm)
new_data_for_plot <- cbind(new_data_for_plot, pm)
#find mean and SEM
return(new_data_for_plot)
}
#######################
temp_data <- subset(df.trial_merge, TMA.Concentration !=0 & Subject !=1000)
form <- formula("IntensityRating.inv ~ TMA.Concentration")
new_data_for_plot <- HillEquationFit3(temp_data, form, normalized = FALSE)
#test function plot
# print(ggplot(temp_data, aes(x = TMA.Concentration, y = IntensityRating.inv)) +
#         geom_point() +
#         geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
#         geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
#         ggtitle(paste("Test Graph for Type TMA"))
# )
#get mean and SEM
summary_test <- ddply(temp_data, .variables = c("TMA.Concentration"), .fun = summarize, Intensity = mean(IntensityRating.inv), se = sd(IntensityRating.inv)/sqrt(length(IntensityRating.inv)))
summary_test$Concentration <- log10(summary_test$TMA.Concentration)
################################################################################################
#plot
################################################################################################
ggplot(summary_test, aes(x = TMA.Concentration, y = Intensity)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) + # error bars of samples
#scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong", "Strongest imaginable \nsensation of any kind")) +
scale_y_continuous(limits = c(0, 53.3*5), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong")) +#yusuke's line *5 +
ggtitle("Experiment 3 TMA Concentration") +
theme_bw() +
xlab("TMA Concentration (mM)") +
ylab("Intensity Ratings")
print(plot.experiment1)
subj <- dir(path = "/Volumes/mainland/Projects/TMA\ blocker/SupraStyle/Data/Raw Data/DR_Agitated", pattern="\\.txt$", full.names=TRUE)# creating a list of all file names
names(subj)  <- basename(subj)
df  <- ldply(subj, read.delim, stringsAsFactors=FALSE)
#subset variables
df <- subset(df, select = c("Subject", "Trial", "valve", "valve2", "TrainList", "Running.Block.", "IntensityRating"))
df$IntensityRating.inv <- 580-as.integer(df$IntensityRating)
#Trial Data
df.trial <- subset(df, Running.Block. == "Test", select = c("Subject", "Trial", "valve", "valve2", "Running.Block.", "IntensityRating.inv"))
#name the trials based on valves
Exp3retest.df <- subset(df.trial_merge, Subject!=1000)
#original test-retest function
correl.coeff <- function(Exp3retestT1, Exp3retestT2){
Exp3retestT1 <- Exp3retestT1[,-3] #get rid of column w/ trial and Session numbers
Exp3retestT2 <- Exp3retestT2[,-3]
names(Exp3retestT1) = c("valve", "Subject", "valve2", "Running.Block.", "trial1", "TMA.Concentration")
names(Exp3retestT2) = c("valve", "Subject", "valve2", "Running.Block.", "trial2", "TMA.Concentration")
Exp3Trials.comb <- merge(Exp3retestT1, Exp3retestT2, by.x = c("valve", "Subject", "valve2", "Running.Block.", "TMA.Concentration"), by.y = c("valve", "Subject", "valve2", "Running.Block.", "TMA.Concentration"))#merge the dataframes
testRetest.exp3 <- ddply(Exp3Trials.comb, .variables = c("Subject"), function(x) trial.cor = cor(x$trial1, x$trial2))
testRetest.exp3$trial.corr <- abs(testRetest.exp3$V1)#takes abs. value of correlation values
return(testRetest.exp3)
}
#Exp3retest.df <- subset(Exp3retest.df, select = c("Subject", "Trial", "IntensityRating.inv", "TMA.Concentration"))
Exp3retestT1 <- subset(Exp3retest.df, Trial <=26)
Exp3retestT2 <- subset(Exp3retest.df, Trial > 26)
#run the test-retest function
testRetest.exp3 <- correl.coeff(Exp3retestT1, Exp3retestT2)
#put subjects into order
testRetest.exp3$SubjectOrder <- factor(testRetest.exp3$Subject, levels = c(11, 50, 29, 33, 56, 49, 59, 58, 62, 54, 53), labels = c(1,2,3,4,5,6,7,8,9,10,11))
ggplot(testRetest.exp3, aes(x = SubjectOrder, y = trial.corr)) +
geom_point()  +
ylim(0,1)
testRetest.Exp3 <- testRetest.exp3
testRetest.Exp3$Experiment <- 3
testRetest <- function(Trial1, Trial2){
Trial1 <- Trial1[,c(-3,-4)]
Trial2 <- Trial2[,c(-3,-4)]
names(Trial1) = c("valve", "Subject", "Running.Block.", "trial1", "TMA.Concentration")
names(Trial2) = c("valve", "Subject", "Running.Block.", "trial2", "TMA.Concentration")
Trial.combo <- merge(Trial1, Trial2)#merge the dataframes
testRetest.Exp3 <- ddply(Trial.combo, .variables = c("Subject"), function(x) trial.cor = cor(x$trial1, x$trial2))
testRetest.Exp3$V1 <- abs(testRetest.Exp3$V1)#takes abs. value of correlation values
return(testRetest.Exp3)
}
TrialSplit <- subset(Exp3retest.df, Trial <= 26)
Trial1 <- subset(TrialSplit, valve2 == 23)
Trial2 <- subset(TrialSplit, valve2 == 24)
TrialSplit2 <- subset(Exp3retest.df, Trial >26)
Trial3 <- subset(TrialSplit2, valve2 == 23)
Trial4 <- subset(TrialSplit2, valve2 == 24)
#make all the different combinations
TR.12 <- testRetest(Trial1, Trial2)
names(TR.12) <- c("Subject", "TR12")
TR.13 <- testRetest(Trial1, Trial3)
names(TR.13) <- c("Subject", "TR13")
TR.14 <- testRetest(Trial1, Trial4)
names(TR.14) <- c("Subject", "TR14")
TR.23 <- testRetest(Trial2, Trial3)
names(TR.23) <- c("Subject", "TR23")
TR.24 <- testRetest(Trial2, Trial4)
names(TR.24) <- c("Subject", "TR24")
TR.34 <- testRetest(Trial3, Trial4)
names(TR.34) <- c("Subject", "TR34")
TR.allCombos <- merge(TR.12, TR.13)
TR.allCombos <- merge(TR.allCombos, TR.14)
TR.allCombos <- merge(TR.allCombos, TR.23)
TR.allCombos <- merge(TR.allCombos, TR.24)
TR.allCombos <- merge(TR.allCombos, TR.34)
#melt the data
TR.allCombos.melt <- melt(TR.allCombos, c("Subject"))
ggplot(TR.allCombos.melt, aes(x = factor(Subject), y = value, color = variable)) +
geom_point(aes(size = 10)) +
ylim(0,1) +
theme_bw() +
theme(text = element_text(size = 30),
legend.position = "none") +
ylab("Test-Retest Correlation") +
xlab("Subjects") +
geom_hline(yintercept = 0.4) +
ggtitle("Test-Retest Correlation for All Trial Combinations in Experiment 3")
TrialSplit <- subset(Exp3retest.df, Trial <= 26)
Trial1 <- subset(TrialSplit, valve2 == 23)
Trial2 <- subset(TrialSplit, valve2 == 24)
TrialSplit2 <- subset(Exp3retest.df, Trial > 26)
Trial3 <- subset(TrialSplit2, valve2 == 23)
Trial4 <- subset(TrialSplit2, valve2 == 24)
Trial1 <- Trial1[,c(-3,-4)]
Trial2 <- Trial2[,c(-3,-4)]
Trial3 <- Trial3[,c(-3,-4)]
Trial4 <- Trial4[,c(-3,-4)]
names(Trial1) = c("valve", "Subject", "Running.Block.", "trial1", "TMA.Concentration")
names(Trial2) = c("valve", "Subject", "Running.Block.", "trial2", "TMA.Concentration")
names(Trial3) = c("valve", "Subject", "Running.Block.", "trial1", "TMA.Concentration")
names(Trial4) = c("valve", "Subject", "Running.Block.", "trial2", "TMA.Concentration")
Trial.12 <- merge(Trial1, Trial2)#merge the dataframes
Trial.34 <- merge(Trial3, Trial4)
names(Trial3) = c("valve", "Subject", "Running.Block.", "trial2", "TMA.Concentration")
Trial.13 <- merge(Trial1, Trial3)
Trial.14 <- merge(Trial1, Trial4)
names(Trial2) = c("valve", "Subject", "Running.Block.", "trial1", "TMA.Concentration")
Trial.23 <- merge(Trial2, Trial3)
Trial.24 <- merge(Trial2, Trial4)
Trial.combo <- rbind(Trial.12, Trial.34, Trial.13, Trial.14, Trial.23, Trial.24)
testRetest.Exp3 <- ddply(Trial.combo, .variables = c("Subject", "TMA.Concentration"), function(x) trial.cor = cor(x$trial1, x$trial2))
testRetest.Exp3$V1 <- abs(testRetest.Exp3$V1)#takes abs. value of correlation values
library(reshape2)
library(ggplot2)
library(plyr)
library(pipeR)
#Import Data
subj <- dir(path = "Raw Data/Pilot", pattern="\\.txt$", full.names=TRUE)# creating a list of all file names
names(subj)  <- basename(subj)
df  <- ldply(subj, read.delim, stringsAsFactors=FALSE)
#subset variables
df <- subset(df, select = c("Subject", "Trial", "valve", "valve2", "TrainList", "Running.Block.", "IntensityRating"))
df$IntensityRating.inv <- 580-as.integer(df$IntensityRating)
#Trial Data
df.trial <- subset(df, Running.Block. == "Test", select = c("Subject", "Trial", "valve", "valve2", "Running.Block.", "IntensityRating.inv"))
#name the trials based on valves
valve.list <- read.csv("Analysis/TMA_supra_Pilot_merge.csv")
#merge with trial list
df.trial_merge <- merge(df.trial, valve.list)
#lost some stuff, try graphing and get back to it.
#graph
ggplot(data = subset(df.trial_merge), aes(x = Concentration, y = IntensityRating.inv, color = Type)) +
geom_point() +
facet_wrap(~Type)
subj <- dir(path = "Raw Data/DR", pattern="\\.txt$", full.names=TRUE)# creating a list of all file names
names(subj)  <- basename(subj)
DR  <- ldply(subj, read.delim, stringsAsFactors=FALSE)
#subset variables
DR <- subset(DR, select = c("Subject", "Trial", "valve", "valve2", "TrainList", "Running.Block.", "IntensityRating"))
DR$IntensityRating.inv <- 580-as.integer(DR$IntensityRating)
#Trial Data
DR.trial <- subset(DR, Running.Block. == "Test", select = c("Subject", "Trial", "valve", "valve2", "Running.Block.", "IntensityRating.inv"))
#name the trials based on valves
valve.list <- read.csv("Analysis/TMA_DR_merge.csv")
#merge with trial list
DR.trial_merge <- merge(DR.trial, valve.list)
DR.trial_merge$TMA.Concentration <- as.double(DR.trial_merge$TMA.Concentration) #make TMA.concentration into a number
#rename to compare with second run
DR1 <- DR.trial_merge
#plot
ggplot(data = subset(DR.trial_merge), aes(x = TMA.Concentration, y = IntensityRating.inv, color = factor(valve2))) +
geom_point() +
facet_wrap(~Subject) #+
subj <- dir(path = "Raw Data/DR-2", pattern="\\.txt$", full.names=TRUE)# creating a list of all file names
names(subj)  <- basename(subj)
DR  <- ldply(subj, read.delim, stringsAsFactors=FALSE)
#subset variables
DR <- subset(DR, select = c("Subject", "Trial", "valve", "valve2", "TrainList", "Running.Block.", "IntensityRating"))
DR$IntensityRating.inv <- 580-as.integer(DR$IntensityRating)
#Trial Data
DR.trial <- subset(DR, Running.Block. == "Test", select = c("Subject", "Trial", "valve", "valve2", "Running.Block.", "IntensityRating.inv"))
#name the trials based on valves
valve.list <- read.csv("Analysis/TMA_DR_merge.csv")
#merge with trial list
DR.trial_merge <- merge(DR.trial, valve.list)
DR.trial_merge$TMA.Concentration <- as.double(DR.trial_merge$TMA.Concentration) #make TMA.concentration into a number
DR2 <- DR.trial_merge #rename to merge with other data
#plot
#pdf("TMADR_2.pdf")
ggplot(data = subset(DR.trial_merge), aes(x = TMA.Concentration, y = IntensityRating.inv, color = factor(valve2))) +
geom_point() +
facet_wrap(~Subject)
library(reshape2)
library(ggplot2)
library(plyr)
library(pipeR)
#Import Data
subj <- dir(path = "Raw Data/Pilot", pattern="\\.txt$", full.names=TRUE)# creating a list of all file names
names(subj)  <- basename(subj)
df  <- ldply(subj, read.delim, stringsAsFactors=FALSE)
#subset variables
df <- subset(df, select = c("Subject", "Trial", "valve", "valve2", "TrainList", "Running.Block.", "IntensityRating"))
df$IntensityRating.inv <- 580-as.integer(df$IntensityRating)
#Trial Data
df.trial <- subset(df, Running.Block. == "Test", select = c("Subject", "Trial", "valve", "valve2", "Running.Block.", "IntensityRating.inv"))
#name the trials based on valves
valve.list <- read.csv("Analysis/TMA_supra_Pilot_merge.csv")
#merge with trial list
df.trial_merge <- merge(df.trial, valve.list)
#lost some stuff, try graphing and get back to it.
#graph
ggplot(data = subset(df.trial_merge), aes(x = Concentration, y = IntensityRating.inv, color = Type)) +
geom_point() +
facet_wrap(~Type)
#graph each subject
for (i in c(3, 8)){
plot <- ggplot(data = subset(df.trial_merge, Subject == i & Type == "TMA"), aes(x = Concentration, y = IntensityRating.inv, color = Type)) +
geom_point() +
facet_wrap(~Type) +
ggtitle(paste("Subject # ", i))
print(plot)
}
ggplot(data = subset(df.trial_merge), aes(x = Concentration, y = IntensityRating.inv, color = Type)) +
geom_point() +
facet_wrap(~Type)
ggplot(data = subset(df.trial_merge, Subject %in% c(5,7,8) & Type == "TMA"), aes(x = Concentration, y = IntensityRating.inv, color = factor(Subject))) +
geom_point() +
#facet_wrap(~Type) +
ggtitle("TMA Response")
pdf("Analysis/pilotData.TMA.lowConcentrations.pdf", width = 8, height = 8)
ggplot(data = subset(df.trial_merge), aes(x = Concentration, y = IntensityRating.inv, color = Type)) +
geom_point() +
facet_wrap(~Type)
dev.off()
subj <- dir(path = "Raw Data/DR", pattern="\\.txt$", full.names=TRUE)# creating a list of all file names
names(subj)  <- basename(subj)
DR  <- ldply(subj, read.delim, stringsAsFactors=FALSE)
#subset variables
DR <- subset(DR, select = c("Subject", "Trial", "valve", "valve2", "TrainList", "Running.Block.", "IntensityRating"))
DR$IntensityRating.inv <- 580-as.integer(DR$IntensityRating)
#Trial Data
DR.trial <- subset(DR, Running.Block. == "Test", select = c("Subject", "Trial", "valve", "valve2", "Running.Block.", "IntensityRating.inv"))
#name the trials based on valves
valve.list <- read.csv("Analysis/TMA_DR_merge.csv")
#merge with trial list
DR.trial_merge <- merge(DR.trial, valve.list)
DR.trial_merge$TMA.Concentration <- as.double(DR.trial_merge$TMA.Concentration) #make TMA.concentration into a number
#rename to compare with second run
DR1 <- DR.trial_merge
#plot
ggplot(data = subset(DR.trial_merge), aes(x = TMA.Concentration, y = IntensityRating.inv, color = factor(valve2))) +
geom_point() +
facet_wrap(~Subject) #+
subj <- dir(path = "Raw Data/DR-2", pattern="\\.txt$", full.names=TRUE)# creating a list of all file names
names(subj)  <- basename(subj)
DR  <- ldply(subj, read.delim, stringsAsFactors=FALSE)
#subset variables
DR <- subset(DR, select = c("Subject", "Trial", "valve", "valve2", "TrainList", "Running.Block.", "IntensityRating"))
DR$IntensityRating.inv <- 580-as.integer(DR$IntensityRating)
#Trial Data
DR.trial <- subset(DR, Running.Block. == "Test", select = c("Subject", "Trial", "valve", "valve2", "Running.Block.", "IntensityRating.inv"))
#name the trials based on valves
valve.list <- read.csv("Analysis/TMA_DR_merge.csv")
#merge with trial list
DR.trial_merge <- merge(DR.trial, valve.list)
DR.trial_merge$TMA.Concentration <- as.double(DR.trial_merge$TMA.Concentration) #make TMA.concentration into a number
DR2 <- DR.trial_merge #rename to merge with other data
#plot
#pdf("TMADR_2.pdf")
ggplot(data = subset(DR.trial_merge), aes(x = TMA.Concentration, y = IntensityRating.inv, color = factor(valve2))) +
geom_point() +
facet_wrap(~Subject)
DR2$Session <- 2
DR1$Session <- 1
DR_sessions <- rbind(DR1, DR2) #bind databases together
#graph
ggplot(data = DR_sessions, aes(x = TMA.Concentration, y = IntensityRating.inv, color = factor(Session))) +
geom_point() +
facet_wrap(~Subject, scales = "free")
pdf("Analysis/Pilot.TMAHigherConcentration_freeaxes.pdf", height = 8, width = 8)
ggplot(data = DR_sessions, aes(x = TMA.Concentration, y = IntensityRating.inv, color = factor(Session))) +
geom_point() +
facet_wrap(~Subject, scales = "free")
dev.off()
pdf("Analysis/Pilot.TMAHigherConcentration_.pdf", height = 8, width = 8)
ggplot(data = DR_sessions, aes(x = TMA.Concentration, y = IntensityRating.inv, color = factor(Session))) +
geom_point() #+
#facet_wrap(~Subject, scales = "free")
dev.off()
pdf("Analysis/Pilot.TMAHigherConcentration_.pdf", height = 8, width = 8)
ggplot(data = DR_sessions, aes(x = TMA.Concentration, y = IntensityRating.inv, color = factor(Session))) +
geom_point() +
#facet_wrap(~Subject, scales = "free")
facet_wrap(~Subject)
dev.off()
