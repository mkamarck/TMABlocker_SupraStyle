stat_function(fun = TMAjars.graph) +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1)
ggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1)
summary_test <- df.scale %>>%
group_by(Concentration) %>>%
summarise(Intensity = mean(IntensityRating.inv), se = se(IntensityRating.inv)) %>>%
ungroup()
summary_test <- df.scale %>>%
group_by(Concentration) %>>%
summarise(Intensity = mean(IntensityRating.inv), se = sd(IntensityRating.inv)/sqrt(length(IntensityRating.inv))) %>>%
ungroup()
ggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
ggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(x = Concentration, y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
View(summary_test)
summary_test <- df.scale %>>%
group_by(TMA.Concentration) %>>%
summarise(Intensity = mean(IntensityRating.inv), se = sd(IntensityRating.inv)/sqrt(length(IntensityRating.inv))) %>>%
ungroup()
summary_test <- df.scale %>>%
group_by(TMA.Concentration) %>>%
summarise(Intensity = mean(normIntensity), se = sd(normIntensity)/sqrt(length(normIntensity))) %>>%
ungroup()
View(df.scale)
summary_test <- df.scale %>>%
group_by(TMA.Concentration) %>>%
summarise(Intensity = mean(normIntensity), se = sd(normIntensity)/sqrt(length(normIntensity))) %>>%
ungroup()
max_int = df.trial_merge %>>%
group_by(TMA.Concentration) %>>%
summarise(mean = mean(IntensityRating.inv), sd = sd(IntensityRating.inv)) %>>%
ungroup() %>>%
mutate(mean_sd = mean + sd) %>>%
arrange(desc(mean)) %>>%
(.[1, "mean_sd"]) %>>%
as.numeric()
#top_upper = max(top, max_int) #I'm not sure how to do this for fitting with multiple people, for now I'm just going to set the top to 500
top_upper = 500
temp_fit <- drm(form,
data = temp_data,
lowerl = c(-4*log(10), 0, 0, min_conc), #had to change the limits for the normalization process.
upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero?
fct = LL.4())
summary(temp_fit)
temp_data <- subset(df.scale, TMA.Concentration !=0 & Subject %notin% c(14, 16, 18, 36))
temp_data <- subset(df.scale, TMA.Concentration !=0 & !Subject %in% c(14, 16, 18, 36))
unique(temp_data$Subject)
temp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #
#min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)]) #takes the minimum concentration whichi s not the concentration of solvent or air
min_conc <- min(temp_conc[temp_conc != 0])
max_conc <- max(temp_conc)
form <- formula("IntensityRating.inv ~ TMA.Concentration")
max_int = df.trial_merge %>>%
group_by(TMA.Concentration) %>>%
summarise(mean = mean(IntensityRating.inv), sd = sd(IntensityRating.inv)) %>>%
ungroup() %>>%
mutate(mean_sd = mean + sd) %>>%
arrange(desc(mean)) %>>%
(.[1, "mean_sd"]) %>>%
as.numeric()
#top_upper = max(top, max_int) #I'm not sure how to do this for fitting with multiple people, for now I'm just going to set the top to 500
top_upper = 500
temp_fit <- drm(form,
data = temp_data,
lowerl = c(-4*log(10), 0, 0, min_conc), #had to change the limits for the normalization process.
upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero?
fct = LL.4())
#using LL.4 instead of L.4 becuase the function actually seems to fit here!
summary(temp_fit)
conc_Air = 0
new_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))
# predictions and confidence intervals
pm <- predict(temp_fit, newdata = new_data_for_plot, interval = "confidence") %>>% data.frame()
new_data_for_plot <- bind_cols(new_data_for_plot, pm)
summary_test <- df.scale %>>%
group_by(TMA.Concentration) %>>%
summarise(Intensity = mean(IntensityRating.inv), se = sd(IntensityRating.inv)/sqrt(length(IntensityRating.inv))) %>>%
ungroup()
ggplot(df.scale, aes(x = TMA.Concentration, y = Intensity.inv)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(x = Concentration, y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
ggplot(df.scale, aes(x = TMA.Concentration, y = IntensityRating.inv)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(x = Concentration, y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
ggplot(df.scale, aes(x = TMA.Concentration, y = IntensityRating.inv)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction))
ggplot(df.scale, aes(x = TMA.Concentration, y = IntensityRating.inv)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1)
ggplot(df.scale, aes(x = TMA.Concentration, y = IntensityRating.inv)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)
ggplot() +
#geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
ggplot(df.scale, aes(x = TMA.Concentration) +
#geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
ggplot(df.scale, aes(x = TMA.Concentration)) +
ggplot(df.scale, aes(x = TMA.Concentration)) +
#geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
temp_data <- subset(df.scale, TMA.Concentration !=0 & !Subject %in% c(14, 16, 18, 36))
temp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #
#min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)]) #takes the minimum concentration whichi s not the concentration of solvent or air
min_conc <- min(temp_conc[temp_conc != 0])
max_conc <- max(temp_conc)
form <- formula("normIntensity ~ TMA.Concentration")
max_int = df.scale %>>%
group_by(TMA.Concentration) %>>%
summarise(mean = mean(normIntensity), sd = sd(normIntensity)) %>>%
ungroup() %>>%
mutate(mean_sd = mean + sd) %>>%
arrange(desc(mean)) %>>%
(.[1, "mean_sd"]) %>>%
as.numeric()
top_upper = 500
temp_fit <- drm(form,
data = temp_data,
lowerl = c(-4*log(10), 0, 0, min_conc), #had to change the limits for the normalization process.
upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero?
fct = LL.4())
summary(temp_fit)
temp_data <- subset(df.scale, TMA.Concentration !=0)
temp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #
#min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)]) #takes the minimum concentration whichi s not the concentration of solvent or air
min_conc <- min(temp_conc[temp_conc != 0])
max_conc <- max(temp_conc)
form <- formula("normIntensity ~ TMA.Concentration")
# max_int = df.scale %>>%
#   group_by(TMA.Concentration) %>>%
#   summarise(mean = mean(normIntensity), sd = sd(normIntensity)) %>>%
#   ungroup() %>>%
#   mutate(mean_sd = mean + sd) %>>%
#   arrange(desc(mean)) %>>%
#   (.[1, "mean_sd"]) %>>%
#   as.numeric()
#top_upper = max(top, max_int) #I'm not sure how to do this for fitting with multiple people, for now I'm just going to set the top to 500
top_upper = 500
temp_fit <- drm(form,
data = temp_data,
lowerl = c(-4*log(10), 0, 0, min_conc), #had to change the limits for the normalization process.
upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero?
fct = LL.4())
#using LL.4 instead of L.4 becuase the function actually seems to fit here! - not sure the difference, maybe in inputting logarhythms or something
summary(temp_fit)
temp_data <- subset(df.scale, TMA.Concentration !=0)
temp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #
#min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)]) #takes the minimum concentration whichi s not the concentration of solvent or air
min_conc <- min(temp_conc[temp_conc != 0])
max_conc <- max(temp_conc)
form <- formula("normIntensity ~ TMA.Concentration")
top_upper = 5
temp_fit <- drm(form,
data = temp_data,
lowerl = c(-4*log(10), -5, -5, min_conc), #had to change the limits for the normalization process.
upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero?
fct = LL.4())
summary(temp_fit)
conc_Air = 0
new_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))
# predictions and confidence intervals
pm <- predict(temp_fit, newdata = new_data_for_plot, interval = "confidence") %>>% data.frame()
new_data_for_plot <- bind_cols(new_data_for_plot, pm)
summary_test <- df.scale %>>%
group_by(TMA.Concentration) %>>%
summarise(Intensity = mean(normIntensity), se = sd(normIntensity)/sqrt(length(normIntensity))) %>>%
ungroup()
rm(summary_test)
summary_test <- df.scale %>>%
group_by(TMA.Concentration) %>>%
summarise(Intensity = mean(normIntensity), se = sd(normIntensity)/sqrt(length(normIntensity))) %>>%
ungroup()
summary_test <- df.scale %>>%
group_by(TMA.Concentration) %>>%
summarise(Intensity = mean(IntensityRating.inv), se = sd(IntensityRating.inv)/sqrt(length(IntensityRating.inv))) %>>%
ungroup()
View(summary_test)
summary_test <- df.scale %>>%
group_by(TMA.Concentration) %>>%
summarise(Intensity = mean(IntensityRating.inv), se = sd(IntensityRating.inv)/sqrt(length(IntensityRating.inv))) %>>%
ungroup()
temp_data <- subset(df.scale, TMA.Concentration !=0 & !Subject %in% c(14, 16, 18, 36))
temp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #
#min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)]) #takes the minimum concentration whichi s not the concentration of solvent or air
min_conc <- min(temp_conc[temp_conc != 0])
max_conc <- max(temp_conc)
form <- formula("normIntensity ~ TMA.Concentration")
top_upper = 5
temp_fit <- drm(form,
data = temp_data,
lowerl = c(-4*log(10), -5, -5, min_conc), #had to change the limits for the normalization process.
upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero?
fct = LL.4())
#using LL.4 instead of L.4 becuase the function actually seems to fit here! - not sure the difference, maybe in inputting logarhythms or something
summary(temp_fit)
temp_data <- subset(df.scale, TMA.Concentration !=0 & !Subject %in% c(14, 16, 18, 36))
temp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #
#min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)]) #takes the minimum concentration whichi s not the concentration of solvent or air
min_conc <- min(temp_conc[temp_conc != 0])
max_conc <- max(temp_conc)
form <- formula("IntensityRating.inv ~ TMA.Concentration")
# max_int = df.scale %>>%
#   group_by(TMA.Concentration) %>>%
#   summarise(mean = mean(normIntensity), sd = sd(normIntensity)) %>>%
#   ungroup() %>>%
#   mutate(mean_sd = mean + sd) %>>%
#   arrange(desc(mean)) %>>%
#   (.[1, "mean_sd"]) %>>%
#   as.numeric()
#top_upper = max(top, max_int) #I'm not sure how to do this for fitting with multiple people, for now I'm just going to set the top to 500
top_upper = 500
temp_fit <- drm(form,
data = temp_data,
lowerl = c(-4*log(10), 0, 0, min_conc), #had to change the limits for the normalization process.
upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero?
fct = LL.4())
#using LL.4 instead of L.4 becuase the function actually seems to fit here! - not sure the difference, maybe in inputting logarhythms or something
summary(temp_fit)
temp_data <- subset(df.scale, TMA.Concentration !=0 & !Subject %in% c(14, 16, 18, 36))
temp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #
#min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)]) #takes the minimum concentration whichi s not the concentration of solvent or air
min_conc <- min(temp_conc[temp_conc != 0])
max_conc <- max(temp_conc)
form <- formula("normIntensity ~ TMA.Concentration")
top_upper = 5
temp_fit <- drm(form,
data = temp_data,
lowerl = c(-4*log(10), -5, -5, min_conc), #had to change the limits for the normalization process.
upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero?
fct = LL.4())
#using LL.4 instead of L.4 becuase the function actually seems to fit here! - not sure the difference, maybe in inputting logarhythms or something
summary(temp_fit)
conc_Air = 0
new_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))
# predictions and confidence intervals
pm <- predict(temp_fit, newdata = new_data_for_plot, interval = "confidence") %>>% data.frame()
new_data_for_plot <- bind_cols(new_data_for_plot, pm)
summary_test <- df.scale %>>%
group_by(TMA.Concentration) %>>%
summarise(Intensity = mean(normIntensity), se = sd(normIntensity)/sqrt(length(normIntensity))) %>>%
ungroup()
ggplot(df.scale, aes(x = TMA.Concentration)) +
#geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) #+
ggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +
#geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) #+
ggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) #+
1.4*5
6.1*5
temp_data <- subset(df.scale, TMA.Concentration !=0 & !Subject %in% c(14, 16, 18, 36))
temp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #
#min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)]) #takes the minimum concentration whichi s not the concentration of solvent or air
min_conc <- min(temp_conc[temp_conc != 0])
max_conc <- max(temp_conc)
form <- formula("IntensityRating.inv ~ TMA.Concentration")
# max_int = df.scale %>>%
#   group_by(TMA.Concentration) %>>%
#   summarise(mean = mean(normIntensity), sd = sd(normIntensity)) %>>%
#   ungroup() %>>%
#   mutate(mean_sd = mean + sd) %>>%
#   arrange(desc(mean)) %>>%
#   (.[1, "mean_sd"]) %>>%
#   as.numeric()
#top_upper = max(top, max_int) #I'm not sure how to do this for fitting with multiple people, for now I'm just going to set the top to 500
top_upper = 500
temp_fit <- drm(form,
data = temp_data,
lowerl = c(-4*log(10), 0, 0, min_conc), #had to change the limits for the normalization process.
upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero?
fct = LL.4())
#using LL.4 instead of L.4 becuase the function actually seems to fit here! - not sure the difference, maybe in inputting logarhythms or something
summary(temp_fit)
#make prediction dataframe
conc_Air = 0
new_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))
# predictions and confidence intervals
pm <- predict(temp_fit, newdata = new_data_for_plot, interval = "confidence") %>>% data.frame()
new_data_for_plot <- bind_cols(new_data_for_plot, pm)
#find mean and SEM
summary_test <- df.scale %>>%
group_by(TMA.Concentration) %>>%
summarise(Intensity = mean(IntensityRating.inv), se = sd(IntensityRating.inv)/sqrt(length(IntensityRating.inv))) %>>%
ungroup()
#plot
ggplot(df.scale, aes(x = TMA.Concentration)) +
#geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) + # error bars of samples
#scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong", "Strongest imaginable \nsensation of any kind")) +
scale_y_continuous(limits = c(0, 500), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5, 100*5), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong", "Strongest imaginable \nsensation of any kind")) #yusuke's line *5
ggplot(df.scale, aes(x = TMA.Concentration)) +
#geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) + # error bars of samples
#scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong", "Strongest imaginable \nsensation of any kind")) +
scale_y_continuous(limits = c(0, 500), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5, 100*5), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong", "Strongest imaginable \nsensation of any kind")) + #yusuke's line *5 +
scale_x_log10()
summary_test <- ddply(df.scale, .variables = c("TMA.Concentration"), .fun = summarize, Intensity = mean(normIntensity), se = sd(normIntensity)/sqrt(length(normIntensity)))
View(summary_test)
ggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) #+
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
temp_data <- subset(df.scale, TMA.Concentration !=0 & !Subject %in% c(14, 16, 18, 36))
temp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #
#min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)]) #takes the minimum concentration whichi s not the concentration of solvent or air
min_conc <- min(temp_conc[temp_conc != 0])
max_conc <- max(temp_conc)
form <- formula("normIntensity ~ TMA.Concentration")
#top_upper = max(top, max_int) #I'm not sure how to do this for fitting with multiple people, for now I'm just going to set the top to 500
top_upper = 5
temp_fit <- drm(form,
data = temp_data,
lowerl = c(-4*log(10), -5, -5, min_conc), #had to change the limits for the normalization process.
upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero?
fct = LL.4())
#using LL.4 instead of L.4 becuase the function actually seems to fit here! - not sure the difference, maybe in inputting logarhythms or something
summary(temp_fit)
#make prediction dataframe
conc_Air = 0
new_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))
# predictions and confidence intervals
pm <- predict(temp_fit, newdata = new_data_for_plot, interval = "confidence") %>>% data.frame()
new_data_for_plot <- bind_cols(new_data_for_plot, pm)
#find mean and SEM
summary_test <- df.scale %>>%
group_by(TMA.Concentration) %>>%
summarise(Intensity = mean(normIntensity), se = sd(normIntensity)/sqrt(length(normIntensity))) %>>%
ungroup()
summary_test <- ddply(df.scale, .variables = c("TMA.Concentration"), .fun = summarize, Intensity = mean(normIntensity), se = sd(normIntensity)/sqrt(length(normIntensity)))
#plot
ggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) #+
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
ggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
ggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +
#geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
png("Figures/Experiment3_normalized_curve.png")
ggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +
#geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
dev.off()
dev.off()
png("Figures/Experiment3_normalized_curve.png")
ggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +
#geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
dev.off()
png("Experiment3_normalized_curve.png")
ggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +
#geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
dev.off()
png("Analysis/Figures/Experiment3_normalized_curve.png")
ggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +
#geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
dev.off()
png("Analysis/Figures/Experiment3_rawData_curve_withScale.png")
ggplot(df.scale, aes(x = TMA.Concentration, y = normIntensity)) +
geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(x = Concentration, y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1)  # error bars of samples
dev.off()
png("Analysis/Figures/Experiment3_rawData_curve_withScale.png")
ggplot(df.scale, aes(x = TMA.Concentration)) +
#geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) + # error bars of samples
#scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong", "Strongest imaginable \nsensation of any kind")) +
scale_y_continuous(limits = c(0, 500), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5, 100*5), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong", "Strongest imaginable \nsensation of any kind")) + #yusuke's line *5 +
scale_x_log10()
temp_data <- subset(df.scale, TMA.Concentration !=0 & !Subject %in% c(14, 16, 18, 36))
temp_conc <- temp_data %>>% (.$TMA.Concentration) %>>% sort() %>>% unique() #
#min_conc <- min(temp_conc[!temp_conc %in% c(conc_Solvent, conc_Air)]) #takes the minimum concentration whichi s not the concentration of solvent or air
min_conc <- min(temp_conc[temp_conc != 0])
max_conc <- max(temp_conc)
form <- formula("IntensityRating.inv ~ TMA.Concentration")
# max_int = df.scale %>>%
#   group_by(TMA.Concentration) %>>%
#   summarise(mean = mean(normIntensity), sd = sd(normIntensity)) %>>%
#   ungroup() %>>%
#   mutate(mean_sd = mean + sd) %>>%
#   arrange(desc(mean)) %>>%
#   (.[1, "mean_sd"]) %>>%
#   as.numeric()
#top_upper = max(top, max_int) #I'm not sure how to do this for fitting with multiple people, for now I'm just going to set the top to 500
top_upper = 500
temp_fit <- drm(form,
data = temp_data,
lowerl = c(-4*log(10), 0, 0, min_conc), #had to change the limits for the normalization process.
upperl = c(0, top_upper, top_upper, NA), #why is slope upperlimit equal to zero?
fct = LL.4())
#using LL.4 instead of L.4 becuase the function actually seems to fit here! - not sure the difference, maybe in inputting logarhythms or something
summary(temp_fit)
#make prediction dataframe
conc_Air = 0
new_data_for_plot <- expand.grid(Concentration = seq(min_conc, max_conc, length.out = 1000))
# predictions and confidence intervals
pm <- predict(temp_fit, newdata = new_data_for_plot, interval = "confidence") %>>% data.frame()
new_data_for_plot <- bind_cols(new_data_for_plot, pm)
#find mean and SEM
summary_test <- df.scale %>>%
group_by(TMA.Concentration) %>>%
summarise(Intensity = mean(IntensityRating.inv), se = sd(IntensityRating.inv)/sqrt(length(IntensityRating.inv))) %>>%
ungroup()
#plot
png("Analysis/Figures/Experiment3_rawData_curve_withScale.png")
ggplot(df.scale, aes(x = TMA.Concentration)) +
#geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) + # error bars of samples
#scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong", "Strongest imaginable \nsensation of any kind")) +
scale_y_continuous(limits = c(0, 500), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5, 100*5), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong", "Strongest imaginable \nsensation of any kind")) + #yusuke's line *5 +
scale_x_log10()
dev.off()
png("Analysis/Figures/Experiment3_rawData_curve.png")
ggplot(df.scale, aes(x = TMA.Concentration)) +
#geom_point() +
geom_line(data = new_data_for_plot, aes(x = Concentration, y = Prediction)) +
geom_ribbon(data = new_data_for_plot, aes(x = Concentration, y = Prediction, ymin = Lower, ymax = Upper), alpha = 0.1) +
geom_errorbar(data = summary_test, aes(y = Intensity, ymin = Intensity - se, ymax = Intensity + se), width = 0.1) #+ # error bars of samples
#   #scale_y_continuous(limits = c(0, 100), breaks = c(0, 1.4, 6.1, 17.2, 35.4, 53.3, 100), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong", "Strongest imaginable \nsensation of any kind")) +
#   scale_y_continuous(limits = c(0, 500), breaks = c(0, 7, 30.5, 17.2*5, 35.4*5, 53.3*5, 100*5), labels = c("", "Barely detectable", "Weak", "Moderate", "Strong", "Very strong", "Strongest imaginable \nsensation of any kind")) + #yusuke's line *5 +
#   scale_x_log10()
dev.off()
unique(df.trial_merge$Subject)
subj <- dir(path = "/Volumes/mainland/Projects/TMA\ blocker/SupraStyle/Data/Raw\ Data/Test1_olfactometer", pattern="\\.txt$", full.names=TRUE)# on mac - creating a list of all file names
names(subj)  <- basename(subj)
df  <- ldply(subj, read.delim, stringsAsFactors=FALSE)
df <- subset(df, select = c("Subject", "Trial", "valve", "valve2", "TrainList", "Running.Block.", "IntensityRating"))
df$IntensityRating.inv <- 580-as.integer(df$IntensityRating)
valve.list <- read.csv("/Volumes/mainland/Projects/TMA blocker/SupraStyle/Data/Analysis/TMA_supra_highTMA_merge.csv") #for a mac
#merge with trial list
df.trial_merge <- merge(df.trial, valve.list)
ggplot(df.trial_merge, aes(x = Concentration, y = IntensityRating.inv, color = Type)) +
geom_point() +
facet_wrap(~Type)
ggplot(df.trial_merge, aes(x = Concentration, y = IntensityRating.inv, color = Type)) +
geom_point() +
facet_wrap(~Type)
View(df.trial_merge)
subj <- dir(path = "/Volumes/mainland/Projects/TMA\ blocker/SupraStyle/Data/Raw\ Data/Test1_olfactometer", pattern="\\.txt$", full.names=TRUE)# on mac - creating a list of all file names
names(subj)  <- basename(subj)
df  <- ldply(subj, read.delim, stringsAsFactors=FALSE)
df <- subset(df, select = c("Subject", "Trial", "valve", "valve2", "TrainList", "Running.Block.", "IntensityRating"))
df$IntensityRating.inv <- 580-as.integer(df$IntensityRating)
#Trial Data
df.trial <- subset(df, Running.Block. == "Test", select = c("Subject", "Trial", "valve", "valve2", "Running.Block.", "IntensityRating.inv"))
#import the file that has the trial types
valve.list <- read.csv("/Volumes/mainland/Projects/TMA blocker/SupraStyle/Data/Analysis/TMA_supra_highTMA_merge.csv") #for a mac
#merge with trial list
df.trial_merge <- merge(df.trial, valve.list)
#visualize data
ggplot(df.trial_merge, aes(x = Concentration, y = IntensityRating.inv, color = Type)) +
geom_point() +
facet_wrap(~Type)
